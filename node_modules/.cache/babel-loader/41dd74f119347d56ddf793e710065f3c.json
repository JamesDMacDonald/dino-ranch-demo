{"ast":null,"code":"\"use strict\";\n/**\r\n * @typedef {Object} NtpTimeResult\r\n * @property {Date} now Correct real time\r\n * @property {Number} offset Offset local to real time in milliseconds\r\n * @property {Number} precision Precision in milliseconds\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _ntpPacketParser = require(\"ntp-packet-parser\");\n\nvar _ntpPacketParser2 = _interopRequireDefault(_ntpPacketParser);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar dgram = require(\"dgram\");\n\nvar singleton = void 0;\nvar lastPoll = void 0;\nvar lastResult = void 0;\n\nvar NtpTimeSync = function () {\n  /**\r\n   * @param {Object} options\r\n   */\n  function NtpTimeSync() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n    _classCallCheck(this, NtpTimeSync);\n\n    var defaultOptions = {\n      // list of NTP time servers, optionally including a port (defaults to options.ntpDefaults.port = 123)\n      servers: [\"0.pool.ntp.org\", \"1.pool.ntp.org\", \"2.pool.ntp.org\", \"3.pool.ntp.org\"],\n      // required amount of valid samples\n      sampleCount: 8,\n      // amount of time in milliseconds to wait for an NTP response\n      replyTimeout: 3000,\n      // defaults as of RFC5905\n      ntpDefaults: {\n        port: 123,\n        version: 4,\n        tolerance: 15e-6,\n        minPoll: 4,\n        maxPoll: 17,\n        maxDispersion: 16,\n        minDispersion: 0.005,\n        maxDistance: 1,\n        maxStratum: 16,\n        precision: -18,\n        referenceDate: new Date(\"Jan 01 1900 GMT\")\n      }\n    };\n    this.options = _extends({}, defaultOptions, options); // convert servers to internal representation\n\n    this.options.servers = this.options.servers.map(function (server) {\n      return {\n        host: server.split(\":\", 2)[0],\n        port: Number(server.split(\":\", 2)[1]) || _this.options.ntpDefaults.port\n      };\n    });\n    this.samples = [];\n  }\n  /**\r\n   * Returns a singleton\r\n   * @param {Object} options\r\n   * @return {NtpTimeSync}\r\n   */\n\n\n  _createClass(NtpTimeSync, [{\n    key: \"collectSamples\",\n    value: async function collectSamples(numSamples) {\n      var _this2 = this;\n\n      var ntpResults = [];\n      var retry = 0;\n\n      var _loop = async function _loop() {\n        var timePromises = [];\n\n        _this2.options.servers.forEach(function (server) {\n          timePromises.push(_this2.getNetworkTime(server.host, server.port).then(function (data) {\n            _this2.acceptResponse(data);\n\n            return data;\n          }));\n        }); // wait for NTP responses to arrive\n\n\n        ntpResults = ntpResults.concat(await Promise.all(timePromises.map(function (p) {\n          return p.catch(function (e) {\n            return e;\n          });\n        }))).filter(function (result) {\n          return !(result instanceof Error);\n        });\n\n        if (ntpResults.length === 0) {\n          retry++;\n        }\n      };\n\n      do {\n        await _loop();\n      } while (ntpResults.length < numSamples && retry < 3);\n\n      if (ntpResults.length === 0) {\n        throw new Error(\"Connection error: Unable to get any NTP response after \" + retry + \" retries\");\n      } // filter erroneous responses, use valid ones as samples\n\n\n      var samples = [];\n      ntpResults.forEach(function (data) {\n        var offsetSign = data.transmitTimestamp.getTime() > data.destinationTimestamp.getTime() ? 1 : -1;\n        var offset = (Math.abs(data.receiveTimestamp.getTime() - data.originTimestamp.getTime()) + Math.abs(data.transmitTimestamp.getTime() - data.destinationTimestamp.getTime())) / 2 * offsetSign;\n        var delay = Math.max(data.destinationTimestamp.getTime() - data.originTimestamp.getTime() - (data.receiveTimestamp.getTime() - data.transmitTimestamp.getTime()), Math.pow(2, _this2.options.ntpDefaults.precision));\n        var dispersion = Math.pow(2, data.precision) + Math.pow(2, _this2.options.ntpDefaults.precision) + _this2.options.ntpDefaults.tolerance * (data.destinationTimestamp.getTime() - data.originTimestamp.getTime());\n        samples.push({\n          data: data,\n          offset: offset,\n          delay: delay,\n          dispersion: dispersion\n        });\n      }); // sort samples by ascending delay\n\n      samples.sort(function (a, b) {\n        return a.delay - b.delay;\n      }); // restrict to best n samples\n\n      return samples.slice(0, numSamples);\n    }\n    /**\r\n    * @param {Boolean} force Force NTP update\r\n    * @return {NtpTimeResult}\r\n    */\n\n  }, {\n    key: \"getTime\",\n    value: async function getTime() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (!force && lastPoll && Date.now() - lastPoll < Math.pow(2, this.options.ntpDefaults.minPoll) * 1000) {\n        var _date = new Date();\n\n        _date.setUTCMilliseconds(_date.getUTCMilliseconds() + lastResult.offset);\n\n        return {\n          now: _date,\n          offset: lastResult.offset,\n          precision: lastResult.precision\n        };\n      } // update time samples\n\n\n      this.samples = await this.collectSamples(this.options.sampleCount); // calculate offset\n\n      var offset = this.samples.reduce(function (acc, item) {\n        return acc + item.offset;\n      }, 0) / this.samples.length;\n      var precision = NtpTimeSync.stdDev(this.samples.map(function (sample) {\n        return sample.offset;\n      }));\n      lastResult = {\n        offset: offset,\n        precision: precision\n      };\n      lastPoll = Date.now();\n      var date = new Date();\n      date.setUTCMilliseconds(date.getUTCMilliseconds() + offset);\n      return {\n        now: date,\n        offset: offset,\n        precision: precision\n      };\n    }\n    /**\r\n    * Will return the correct timestamp when function was called\r\n    * @param {Boolean} force\r\n    * @return {Date}\r\n    */\n\n  }, {\n    key: \"now\",\n    value: async function now() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var now = new Date();\n      var result = await this.getTime(force);\n      now.setUTCMilliseconds(now.getUTCMilliseconds() + result.offset);\n      return now;\n    }\n    /**\r\n    * @param {String} string\r\n    * @param {Integer} length\r\n    * @param {String} char\r\n    * @param {String} side\r\n    * @private\r\n    */\n\n  }, {\n    key: \"createPacket\",\n\n    /**\r\n    * @param {Integer} leapIndicator, defaults to 3 (unsynchronized)\r\n    * @param {Integer} ntpVersion, defaults to `options.ntpDefaults.version`\r\n    * @param {Integer} mode, defaults to 3 (client)\r\n    * @return {Buffer}\r\n    * @private\r\n    */\n    value: function createPacket() {\n      var leapIndicator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n      var ntpVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n      ntpVersion = ntpVersion || this.options.ntpDefaults.version; // generate NTP packet\n\n      var ntpData = new Array(48).fill(0);\n      ntpData[0] = // Leap indicator (= 3, unsynchronized)\n      NtpTimeSync.pad((leapIndicator >>> 0).toString(2), 2) + // NTP version (= 4)\n      NtpTimeSync.pad((ntpVersion >>> 0).toString(2), 3) + // client mode (= 3)\n      NtpTimeSync.pad((mode >>> 0).toString(2), 3);\n      ntpData[0] = parseInt(ntpData[0], 2); // origin timestamp\n\n      var baseTime = new Date().getTime() - this.options.ntpDefaults.referenceDate.getTime();\n      var seconds = baseTime / 1000;\n      var ntpTimestamp = (seconds * Math.pow(2, 32)).toString(2);\n      ntpTimestamp = NtpTimeSync.pad(ntpTimestamp, 64); // origin timestamp\n\n      ntpData[24] = parseInt(ntpTimestamp.substr(0, 8), 2);\n      ntpData[25] = parseInt(ntpTimestamp.substr(8, 8), 2);\n      ntpData[26] = parseInt(ntpTimestamp.substr(16, 8), 2);\n      ntpData[27] = parseInt(ntpTimestamp.substr(24, 8), 2);\n      ntpData[28] = parseInt(ntpTimestamp.substr(32, 8), 2);\n      ntpData[29] = parseInt(ntpTimestamp.substr(40, 8), 2);\n      ntpData[30] = parseInt(ntpTimestamp.substr(48, 8), 2);\n      ntpData[31] = parseInt(ntpTimestamp.substr(56, 8), 2); // transmit timestamp\n\n      ntpData[40] = parseInt(ntpTimestamp.substr(0, 8), 2);\n      ntpData[41] = parseInt(ntpTimestamp.substr(8, 8), 2);\n      ntpData[42] = parseInt(ntpTimestamp.substr(16, 8), 2);\n      ntpData[43] = parseInt(ntpTimestamp.substr(24, 8), 2);\n      ntpData[44] = parseInt(ntpTimestamp.substr(32, 8), 2);\n      ntpData[45] = parseInt(ntpTimestamp.substr(40, 8), 2);\n      ntpData[46] = parseInt(ntpTimestamp.substr(48, 8), 2);\n      ntpData[47] = parseInt(ntpTimestamp.substr(56, 8), 2);\n      return Buffer.from(ntpData);\n    }\n    /**\r\n    *\r\n    * @param client\r\n    * @private\r\n    */\n\n  }, {\n    key: \"getNetworkTime\",\n\n    /**\r\n    * @param {String} server\r\n    * @param {Integer} port\r\n    * @return {Promise|NTPPacket}\r\n    */\n    value: function getNetworkTime(server) {\n      var _this3 = this;\n\n      var port = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 123;\n      return new Promise(function (resolve, reject) {\n        var client = dgram.createSocket(\"udp4\");\n        var hasFinished = false;\n\n        var errorCallback = function errorCallback(err) {\n          if (timeoutHandler) {\n            clearTimeout(timeoutHandler);\n            timeoutHandler = null;\n          }\n\n          if (hasFinished) {\n            return;\n          }\n\n          NtpTimeSync.cleanup(client);\n          hasFinished = true;\n          reject(err);\n        };\n\n        client.on(\"error\", function (err) {\n          return errorCallback;\n        }); // setup timeout\n\n        var timeoutHandler = setTimeout(function () {\n          errorCallback(new Error(\"Timeout waiting for NTP response.\"));\n        }, _this3.options.replyTimeout);\n        client.send(_this3.createPacket(), port, server, function (err) {\n          if (hasFinished) {\n            return;\n          }\n\n          if (err) {\n            errorCallback(err);\n            return;\n          }\n\n          client.once(\"message\", function (msg) {\n            if (hasFinished) {\n              return;\n            }\n\n            clearTimeout(timeoutHandler);\n            timeoutHandler = null;\n            client.close();\n\n            var result = _ntpPacketParser2.default.parse(msg);\n\n            result.destinationTimestamp = new Date();\n            hasFinished = true;\n            resolve(result);\n          });\n        });\n      });\n    }\n    /**\r\n    * Test if response is acceptable for synchronization\r\n    * @param {NTPPacket} data\r\n    */\n\n  }, {\n    key: \"acceptResponse\",\n    value: function acceptResponse(data) {\n      /*\r\n      * Format error\r\n      */\n      if (data.version > this.options.ntpDefaults.version) {\n        throw new Error(\"Format error: Expected version \" + this.options.ntpDefaults.version + \", got \" + data.version);\n      }\n      /*\r\n      * A stratum error occurs if (1) the server has never been\r\n      * synchronized, (2) the server stratum is invalid.\r\n      */\n\n\n      if (data.leapIndicator === 3 || data.stratum >= this.options.ntpDefaults.maxStratum) {\n        throw new Error(\"Stratum error: Remote clock is unsynchronized\");\n      }\n      /*\r\n      * Verify valid root distance.\r\n      */\n\n\n      var rootDelay = (data.rootDelay.getTime() - this.options.ntpDefaults.referenceDate.getTime()) / 1000;\n      var rootDispersion = (data.rootDispersion.getTime() - this.options.ntpDefaults.referenceDate.getTime()) / 1000;\n\n      if (rootDelay / 2 + rootDispersion >= this.options.ntpDefaults.maxDispersion) {\n        throw new Error(\"Distance error: Root distance too large\");\n      }\n      /*\r\n      * Verify origin timestamp\r\n      */\n\n\n      if (data.originTimestamp.getTime() > new Date().getTime()) {\n        throw new Error(\"Format error: Origin timestamp is from the future\");\n      }\n    }\n    /**\r\n    * Average for a list of numbers\r\n    * @param {Array} values\r\n    * @return {number}\r\n    * @private\r\n    */\n\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n      if (!singleton) {\n        singleton = new NtpTimeSync(options);\n      }\n\n      return singleton;\n    }\n  }, {\n    key: \"pad\",\n    value: function pad(string, length) {\n      var char = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"0\";\n      var side = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"left\";\n\n      if (side === \"left\") {\n        return char.repeat(length).substring(0, length - string.length) + string;\n      }\n\n      return string + char.repeat(length).substring(0, length - string.length);\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup(client) {\n      try {\n        client.close();\n      } catch (e) {// ignore, as we just want to cleanup\n      }\n    }\n  }, {\n    key: \"avg\",\n    value: function avg(values) {\n      var sum = values.reduce(function (sum, value) {\n        return sum + value;\n      }, 0);\n      return sum / values.length;\n    }\n    /**\r\n    * Standard deviation for a list of numbers\r\n    * @param {Array} values\r\n    * @return {number}\r\n    * @private\r\n    */\n\n  }, {\n    key: \"stdDev\",\n    value: function stdDev(values) {\n      var avg = this.avg(values);\n      var squareDiffs = values.map(function (value) {\n        var diff = value - avg;\n        return diff * diff;\n      });\n      return Math.sqrt(this.avg(squareDiffs));\n    }\n  }]);\n\n  return NtpTimeSync;\n}();\n\nexports.default = NtpTimeSync;","map":{"version":3,"sources":["/home/main/Documents/dino-ranch-landing/node_modules/ntp-time-sync/dist/index.js"],"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_ntpPacketParser","require","_ntpPacketParser2","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","TypeError","dgram","singleton","lastPoll","lastResult","NtpTimeSync","_this","options","undefined","defaultOptions","servers","sampleCount","replyTimeout","ntpDefaults","port","version","tolerance","minPoll","maxPoll","maxDispersion","minDispersion","maxDistance","maxStratum","precision","referenceDate","Date","map","server","host","split","Number","samples","collectSamples","numSamples","_this2","ntpResults","retry","_loop","timePromises","forEach","push","getNetworkTime","then","data","acceptResponse","concat","Promise","all","p","catch","e","filter","result","Error","offsetSign","transmitTimestamp","getTime","destinationTimestamp","offset","Math","abs","receiveTimestamp","originTimestamp","delay","max","pow","dispersion","sort","a","b","slice","force","now","_date","setUTCMilliseconds","getUTCMilliseconds","reduce","acc","item","stdDev","sample","date","createPacket","leapIndicator","ntpVersion","mode","ntpData","Array","fill","pad","toString","parseInt","baseTime","seconds","ntpTimestamp","substr","Buffer","from","_this3","resolve","reject","client","createSocket","hasFinished","errorCallback","err","timeoutHandler","clearTimeout","cleanup","on","setTimeout","send","once","msg","close","parse","stratum","rootDelay","rootDispersion","getInstance","string","char","side","repeat","substring","avg","values","sum","squareDiffs","diff","sqrt"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,QAAQ,GACVJ,MAAM,CAACK,MAAP,IACA,UAASC,MAAT,EAAiB;AACf,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AACzC,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AACA,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AACtB,UAAIV,MAAM,CAACY,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AACrDL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AACD;AACF;AACF;;AACD,SAAOL,MAAP;AACD,CAZH;;AAcA,IAAIS,YAAY,GAAI,YAAW;AAC7B,WAASC,gBAAT,CAA0BV,MAA1B,EAAkCW,KAAlC,EAAyC;AACvC,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,KAAK,CAACR,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;AACrC,UAAIW,UAAU,GAAGD,KAAK,CAACV,CAAD,CAAtB;AACAW,MAAAA,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;AACAD,MAAAA,UAAU,CAACE,YAAX,GAA0B,IAA1B;AACA,UAAI,WAAWF,UAAf,EAA2BA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AAC3BrB,MAAAA,MAAM,CAACC,cAAP,CAAsBK,MAAtB,EAA8BY,UAAU,CAACP,GAAzC,EAA8CO,UAA9C;AACD;AACF;;AACD,SAAO,UAASI,WAAT,EAAsBC,UAAtB,EAAkCC,WAAlC,EAA+C;AACpD,QAAID,UAAJ,EAAgBP,gBAAgB,CAACM,WAAW,CAACV,SAAb,EAAwBW,UAAxB,CAAhB;AAChB,QAAIC,WAAJ,EAAiBR,gBAAgB,CAACM,WAAD,EAAcE,WAAd,CAAhB;AACjB,WAAOF,WAAP;AACD,GAJD;AAKD,CAfkB,EAAnB;;AAiBA,IAAIG,gBAAgB,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AAEA,IAAIC,iBAAiB,GAAGC,sBAAsB,CAACH,gBAAD,CAA9C;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AACD;;AAED,SAASG,eAAT,CAAyBC,QAAzB,EAAmCX,WAAnC,EAAgD;AAC9C,MAAI,EAAEW,QAAQ,YAAYX,WAAtB,CAAJ,EAAwC;AACtC,UAAM,IAAIY,SAAJ,CAAc,mCAAd,CAAN;AACD;AACF;;AAED,IAAIC,KAAK,GAAGT,OAAO,CAAC,OAAD,CAAnB;;AAEA,IAAIU,SAAS,GAAG,KAAK,CAArB;AACA,IAAIC,QAAQ,GAAG,KAAK,CAApB;AACA,IAAIC,UAAU,GAAG,KAAK,CAAtB;;AAEA,IAAIC,WAAW,GAAI,YAAW;AAC5B;AACF;AACA;AACE,WAASA,WAAT,GAAuB;AACrB,QAAIC,KAAK,GAAG,IAAZ;;AAEA,QAAIC,OAAO,GACTjC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBkC,SAAzC,GACIlC,SAAS,CAAC,CAAD,CADb,GAEIkC,SAHN;;AAKAV,IAAAA,eAAe,CAAC,IAAD,EAAOO,WAAP,CAAf;;AAEA,QAAII,cAAc,GAAG;AACnB;AACAC,MAAAA,OAAO,EAAE,CACP,gBADO,EAEP,gBAFO,EAGP,gBAHO,EAIP,gBAJO,CAFU;AASnB;AACAC,MAAAA,WAAW,EAAE,CAVM;AAYnB;AACAC,MAAAA,YAAY,EAAE,IAbK;AAenB;AACAC,MAAAA,WAAW,EAAE;AACXC,QAAAA,IAAI,EAAE,GADK;AAEXC,QAAAA,OAAO,EAAE,CAFE;AAGXC,QAAAA,SAAS,EAAE,KAHA;AAIXC,QAAAA,OAAO,EAAE,CAJE;AAKXC,QAAAA,OAAO,EAAE,EALE;AAMXC,QAAAA,aAAa,EAAE,EANJ;AAOXC,QAAAA,aAAa,EAAE,KAPJ;AAQXC,QAAAA,WAAW,EAAE,CARF;AASXC,QAAAA,UAAU,EAAE,EATD;AAUXC,QAAAA,SAAS,EAAE,CAAC,EAVD;AAWXC,QAAAA,aAAa,EAAE,IAAIC,IAAJ,CAAS,iBAAT;AAXJ;AAhBM,KAArB;AA+BA,SAAKlB,OAAL,GAAerC,QAAQ,CAAC,EAAD,EAAKuC,cAAL,EAAqBF,OAArB,CAAvB,CAzCqB,CA2CrB;;AACA,SAAKA,OAAL,CAAaG,OAAb,GAAuB,KAAKH,OAAL,CAAaG,OAAb,CAAqBgB,GAArB,CAAyB,UAASC,MAAT,EAAiB;AAC/D,aAAO;AACLC,QAAAA,IAAI,EAAED,MAAM,CAACE,KAAP,CAAa,GAAb,EAAkB,CAAlB,EAAqB,CAArB,CADD;AAELf,QAAAA,IAAI,EAAEgB,MAAM,CAACH,MAAM,CAACE,KAAP,CAAa,GAAb,EAAkB,CAAlB,EAAqB,CAArB,CAAD,CAAN,IAAmCvB,KAAK,CAACC,OAAN,CAAcM,WAAd,CAA0BC;AAF9D,OAAP;AAID,KALsB,CAAvB;AAOA,SAAKiB,OAAL,GAAe,EAAf;AACD;AAED;AACF;AACA;AACA;AACA;;;AAEElD,EAAAA,YAAY,CACVwB,WADU,EAEV,CACE;AACE5B,IAAAA,GAAG,EAAE,gBADP;AAEER,IAAAA,KAAK,EAAE,eAAe+D,cAAf,CAA8BC,UAA9B,EAA0C;AAC/C,UAAIC,MAAM,GAAG,IAAb;;AAEA,UAAIC,UAAU,GAAG,EAAjB;AACA,UAAIC,KAAK,GAAG,CAAZ;;AAEA,UAAIC,KAAK,GAAG,eAAeA,KAAf,GAAuB;AACjC,YAAIC,YAAY,GAAG,EAAnB;;AAEAJ,QAAAA,MAAM,CAAC3B,OAAP,CAAeG,OAAf,CAAuB6B,OAAvB,CAA+B,UAASZ,MAAT,EAAiB;AAC9CW,UAAAA,YAAY,CAACE,IAAb,CACEN,MAAM,CACHO,cADH,CACkBd,MAAM,CAACC,IADzB,EAC+BD,MAAM,CAACb,IADtC,EAEG4B,IAFH,CAEQ,UAASC,IAAT,EAAe;AACnBT,YAAAA,MAAM,CAACU,cAAP,CAAsBD,IAAtB;;AAEA,mBAAOA,IAAP;AACD,WANH,CADF;AASD,SAVD,EAHiC,CAejC;;;AACAR,QAAAA,UAAU,GAAGA,UAAU,CACpBU,MADU,CAET,MAAMC,OAAO,CAACC,GAAR,CACJT,YAAY,CAACZ,GAAb,CAAiB,UAASsB,CAAT,EAAY;AAC3B,iBAAOA,CAAC,CAACC,KAAF,CAAQ,UAASC,CAAT,EAAY;AACzB,mBAAOA,CAAP;AACD,WAFM,CAAP;AAGD,SAJD,CADI,CAFG,EAUVC,MAVU,CAUH,UAASC,MAAT,EAAiB;AACvB,iBAAO,EAAEA,MAAM,YAAYC,KAApB,CAAP;AACD,SAZU,CAAb;;AAcA,YAAIlB,UAAU,CAAC5D,MAAX,KAAsB,CAA1B,EAA6B;AAC3B6D,UAAAA,KAAK;AACN;AACF,OAjCD;;AAmCA,SAAG;AACD,cAAMC,KAAK,EAAX;AACD,OAFD,QAESF,UAAU,CAAC5D,MAAX,GAAoB0D,UAApB,IAAkCG,KAAK,GAAG,CAFnD;;AAIA,UAAID,UAAU,CAAC5D,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,cAAM,IAAI8E,KAAJ,CACJ,4DACEjB,KADF,GAEE,UAHE,CAAN;AAKD,OAnD8C,CAqD/C;;;AACA,UAAIL,OAAO,GAAG,EAAd;AACAI,MAAAA,UAAU,CAACI,OAAX,CAAmB,UAASI,IAAT,EAAe;AAChC,YAAIW,UAAU,GACZX,IAAI,CAACY,iBAAL,CAAuBC,OAAvB,KACAb,IAAI,CAACc,oBAAL,CAA0BD,OAA1B,EADA,GAEI,CAFJ,GAGI,CAAC,CAJP;AAMA,YAAIE,MAAM,GACR,CAACC,IAAI,CAACC,GAAL,CACCjB,IAAI,CAACkB,gBAAL,CAAsBL,OAAtB,KAAkCb,IAAI,CAACmB,eAAL,CAAqBN,OAArB,EADnC,IAGCG,IAAI,CAACC,GAAL,CACEjB,IAAI,CAACY,iBAAL,CAAuBC,OAAvB,KACEb,IAAI,CAACc,oBAAL,CAA0BD,OAA1B,EAFJ,CAHF,IAOA,CAPA,GAQAF,UATF;AAWA,YAAIS,KAAK,GAAGJ,IAAI,CAACK,GAAL,CACVrB,IAAI,CAACc,oBAAL,CAA0BD,OAA1B,KACEb,IAAI,CAACmB,eAAL,CAAqBN,OAArB,EADF,IAEGb,IAAI,CAACkB,gBAAL,CAAsBL,OAAtB,KACCb,IAAI,CAACY,iBAAL,CAAuBC,OAAvB,EAHJ,CADU,EAKVG,IAAI,CAACM,GAAL,CAAS,CAAT,EAAY/B,MAAM,CAAC3B,OAAP,CAAeM,WAAf,CAA2BU,SAAvC,CALU,CAAZ;AAQA,YAAI2C,UAAU,GACZP,IAAI,CAACM,GAAL,CAAS,CAAT,EAAYtB,IAAI,CAACpB,SAAjB,IACAoC,IAAI,CAACM,GAAL,CAAS,CAAT,EAAY/B,MAAM,CAAC3B,OAAP,CAAeM,WAAf,CAA2BU,SAAvC,CADA,GAEAW,MAAM,CAAC3B,OAAP,CAAeM,WAAf,CAA2BG,SAA3B,IACG2B,IAAI,CAACc,oBAAL,CAA0BD,OAA1B,KACCb,IAAI,CAACmB,eAAL,CAAqBN,OAArB,EAFJ,CAHF;AAOAzB,QAAAA,OAAO,CAACS,IAAR,CAAa;AACXG,UAAAA,IAAI,EAAEA,IADK;AAEXe,UAAAA,MAAM,EAAEA,MAFG;AAGXK,UAAAA,KAAK,EAAEA,KAHI;AAIXG,UAAAA,UAAU,EAAEA;AAJD,SAAb;AAMD,OAvCD,EAvD+C,CAgG/C;;AACAnC,MAAAA,OAAO,CAACoC,IAAR,CAAa,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC1B,eAAOD,CAAC,CAACL,KAAF,GAAUM,CAAC,CAACN,KAAnB;AACD,OAFD,EAjG+C,CAqG/C;;AACA,aAAOhC,OAAO,CAACuC,KAAR,CAAc,CAAd,EAAiBrC,UAAjB,CAAP;AACD;AAED;AACR;AACA;AACA;;AA9GM,GADF,EAiHE;AACExD,IAAAA,GAAG,EAAE,SADP;AAEER,IAAAA,KAAK,EAAE,eAAeuF,OAAf,GAAyB;AAC9B,UAAIe,KAAK,GACPjG,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBkC,SAAzC,GACIlC,SAAS,CAAC,CAAD,CADb,GAEI,KAHN;;AAKA,UACE,CAACiG,KAAD,IACApE,QADA,IAEAsB,IAAI,CAAC+C,GAAL,KAAarE,QAAb,GACEwD,IAAI,CAACM,GAAL,CAAS,CAAT,EAAY,KAAK1D,OAAL,CAAaM,WAAb,CAAyBI,OAArC,IAAgD,IAJpD,EAKE;AACA,YAAIwD,KAAK,GAAG,IAAIhD,IAAJ,EAAZ;;AACAgD,QAAAA,KAAK,CAACC,kBAAN,CACED,KAAK,CAACE,kBAAN,KAA6BvE,UAAU,CAACsD,MAD1C;;AAIA,eAAO;AACLc,UAAAA,GAAG,EAAEC,KADA;AAELf,UAAAA,MAAM,EAAEtD,UAAU,CAACsD,MAFd;AAGLnC,UAAAA,SAAS,EAAEnB,UAAU,CAACmB;AAHjB,SAAP;AAKD,OAtB6B,CAwB9B;;;AACA,WAAKQ,OAAL,GAAe,MAAM,KAAKC,cAAL,CAAoB,KAAKzB,OAAL,CAAaI,WAAjC,CAArB,CAzB8B,CA2B9B;;AACA,UAAI+C,MAAM,GACR,KAAK3B,OAAL,CAAa6C,MAAb,CAAoB,UAASC,GAAT,EAAcC,IAAd,EAAoB;AACtC,eAAOD,GAAG,GAAGC,IAAI,CAACpB,MAAlB;AACD,OAFD,EAEG,CAFH,IAEQ,KAAK3B,OAAL,CAAaxD,MAHvB;AAKA,UAAIgD,SAAS,GAAGlB,WAAW,CAAC0E,MAAZ,CACd,KAAKhD,OAAL,CAAaL,GAAb,CAAiB,UAASsD,MAAT,EAAiB;AAChC,eAAOA,MAAM,CAACtB,MAAd;AACD,OAFD,CADc,CAAhB;AAMAtD,MAAAA,UAAU,GAAG;AACXsD,QAAAA,MAAM,EAAEA,MADG;AAEXnC,QAAAA,SAAS,EAAEA;AAFA,OAAb;AAIApB,MAAAA,QAAQ,GAAGsB,IAAI,CAAC+C,GAAL,EAAX;AAEA,UAAIS,IAAI,GAAG,IAAIxD,IAAJ,EAAX;AACAwD,MAAAA,IAAI,CAACP,kBAAL,CAAwBO,IAAI,CAACN,kBAAL,KAA4BjB,MAApD;AAEA,aAAO;AACLc,QAAAA,GAAG,EAAES,IADA;AAELvB,QAAAA,MAAM,EAAEA,MAFH;AAGLnC,QAAAA,SAAS,EAAEA;AAHN,OAAP;AAKD;AAED;AACR;AACA;AACA;AACA;;AA7DM,GAjHF,EAgLE;AACE9C,IAAAA,GAAG,EAAE,KADP;AAEER,IAAAA,KAAK,EAAE,eAAeuG,GAAf,GAAqB;AAC1B,UAAID,KAAK,GACPjG,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBkC,SAAzC,GACIlC,SAAS,CAAC,CAAD,CADb,GAEI,KAHN;AAKA,UAAIkG,GAAG,GAAG,IAAI/C,IAAJ,EAAV;AACA,UAAI2B,MAAM,GAAG,MAAM,KAAKI,OAAL,CAAae,KAAb,CAAnB;AAEAC,MAAAA,GAAG,CAACE,kBAAJ,CAAuBF,GAAG,CAACG,kBAAJ,KAA2BvB,MAAM,CAACM,MAAzD;AACA,aAAOc,GAAP;AACD;AAED;AACR;AACA;AACA;AACA;AACA;AACA;;AArBM,GAhLF,EAuME;AACE/F,IAAAA,GAAG,EAAE,cADP;;AAGE;AACR;AACA;AACA;AACA;AACA;AACA;AACQR,IAAAA,KAAK,EAAE,SAASiH,YAAT,GAAwB;AAC7B,UAAIC,aAAa,GACf7G,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBkC,SAAzC,GACIlC,SAAS,CAAC,CAAD,CADb,GAEI,CAHN;AAIA,UAAI8G,UAAU,GACZ9G,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBkC,SAAzC,GACIlC,SAAS,CAAC,CAAD,CADb,GAEI,IAHN;AAIA,UAAI+G,IAAI,GACN/G,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBkC,SAAzC,GACIlC,SAAS,CAAC,CAAD,CADb,GAEI,CAHN;AAKA8G,MAAAA,UAAU,GAAGA,UAAU,IAAI,KAAK7E,OAAL,CAAaM,WAAb,CAAyBE,OAApD,CAd6B,CAgB7B;;AACA,UAAIuE,OAAO,GAAG,IAAIC,KAAJ,CAAU,EAAV,EAAcC,IAAd,CAAmB,CAAnB,CAAd;AAEAF,MAAAA,OAAO,CAAC,CAAD,CAAP,GACE;AACAjF,MAAAA,WAAW,CAACoF,GAAZ,CAAgB,CAACN,aAAa,KAAK,CAAnB,EAAsBO,QAAtB,CAA+B,CAA/B,CAAhB,EAAmD,CAAnD,IACA;AACArF,MAAAA,WAAW,CAACoF,GAAZ,CAAgB,CAACL,UAAU,KAAK,CAAhB,EAAmBM,QAAnB,CAA4B,CAA5B,CAAhB,EAAgD,CAAhD,CAFA,GAGA;AACArF,MAAAA,WAAW,CAACoF,GAAZ,CAAgB,CAACJ,IAAI,KAAK,CAAV,EAAaK,QAAb,CAAsB,CAAtB,CAAhB,EAA0C,CAA1C,CANF;AAQAJ,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAaK,QAAQ,CAACL,OAAO,CAAC,CAAD,CAAR,EAAa,CAAb,CAArB,CA3B6B,CA6B7B;;AACA,UAAIM,QAAQ,GACV,IAAInE,IAAJ,GAAW+B,OAAX,KACA,KAAKjD,OAAL,CAAaM,WAAb,CAAyBW,aAAzB,CAAuCgC,OAAvC,EAFF;AAGA,UAAIqC,OAAO,GAAGD,QAAQ,GAAG,IAAzB;AACA,UAAIE,YAAY,GAAG,CAACD,OAAO,GAAGlC,IAAI,CAACM,GAAL,CAAS,CAAT,EAAY,EAAZ,CAAX,EAA4ByB,QAA5B,CAAqC,CAArC,CAAnB;AACAI,MAAAA,YAAY,GAAGzF,WAAW,CAACoF,GAAZ,CAAgBK,YAAhB,EAA8B,EAA9B,CAAf,CAnC6B,CAqC7B;;AACAR,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,CAApB,EAAuB,CAAvB,CAAD,EAA4B,CAA5B,CAAtB;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,CAApB,EAAuB,CAAvB,CAAD,EAA4B,CAA5B,CAAtB;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,EAApB,EAAwB,CAAxB,CAAD,EAA6B,CAA7B,CAAtB;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,EAApB,EAAwB,CAAxB,CAAD,EAA6B,CAA7B,CAAtB;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,EAApB,EAAwB,CAAxB,CAAD,EAA6B,CAA7B,CAAtB;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,EAApB,EAAwB,CAAxB,CAAD,EAA6B,CAA7B,CAAtB;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,EAApB,EAAwB,CAAxB,CAAD,EAA6B,CAA7B,CAAtB;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,EAApB,EAAwB,CAAxB,CAAD,EAA6B,CAA7B,CAAtB,CA7C6B,CA+C7B;;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,CAApB,EAAuB,CAAvB,CAAD,EAA4B,CAA5B,CAAtB;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,CAApB,EAAuB,CAAvB,CAAD,EAA4B,CAA5B,CAAtB;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,EAApB,EAAwB,CAAxB,CAAD,EAA6B,CAA7B,CAAtB;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,EAApB,EAAwB,CAAxB,CAAD,EAA6B,CAA7B,CAAtB;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,EAApB,EAAwB,CAAxB,CAAD,EAA6B,CAA7B,CAAtB;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,EAApB,EAAwB,CAAxB,CAAD,EAA6B,CAA7B,CAAtB;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,EAApB,EAAwB,CAAxB,CAAD,EAA6B,CAA7B,CAAtB;AACAT,MAAAA,OAAO,CAAC,EAAD,CAAP,GAAcK,QAAQ,CAACG,YAAY,CAACC,MAAb,CAAoB,EAApB,EAAwB,CAAxB,CAAD,EAA6B,CAA7B,CAAtB;AAEA,aAAOC,MAAM,CAACC,IAAP,CAAYX,OAAZ,CAAP;AACD;AAED;AACR;AACA;AACA;AACA;;AA1EM,GAvMF,EAmRE;AACE7G,IAAAA,GAAG,EAAE,gBADP;;AAGE;AACR;AACA;AACA;AACA;AACQR,IAAAA,KAAK,EAAE,SAASwE,cAAT,CAAwBd,MAAxB,EAAgC;AACrC,UAAIuE,MAAM,GAAG,IAAb;;AAEA,UAAIpF,IAAI,GACNxC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBkC,SAAzC,GACIlC,SAAS,CAAC,CAAD,CADb,GAEI,GAHN;AAKA,aAAO,IAAIwE,OAAJ,CAAY,UAASqD,OAAT,EAAkBC,MAAlB,EAA0B;AAC3C,YAAIC,MAAM,GAAGpG,KAAK,CAACqG,YAAN,CAAmB,MAAnB,CAAb;AACA,YAAIC,WAAW,GAAG,KAAlB;;AAEA,YAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;AAC9C,cAAIC,cAAJ,EAAoB;AAClBC,YAAAA,YAAY,CAACD,cAAD,CAAZ;AACAA,YAAAA,cAAc,GAAG,IAAjB;AACD;;AAED,cAAIH,WAAJ,EAAiB;AACf;AACD;;AAEDlG,UAAAA,WAAW,CAACuG,OAAZ,CAAoBP,MAApB;AAEAE,UAAAA,WAAW,GAAG,IAAd;AACAH,UAAAA,MAAM,CAACK,GAAD,CAAN;AACD,SAdD;;AAgBAJ,QAAAA,MAAM,CAACQ,EAAP,CAAU,OAAV,EAAmB,UAASJ,GAAT,EAAc;AAC/B,iBAAOD,aAAP;AACD,SAFD,EApB2C,CAwB3C;;AACA,YAAIE,cAAc,GAAGI,UAAU,CAAC,YAAW;AACzCN,UAAAA,aAAa,CAAC,IAAInD,KAAJ,CAAU,mCAAV,CAAD,CAAb;AACD,SAF8B,EAE5B6C,MAAM,CAAC3F,OAAP,CAAeK,YAFa,CAA/B;AAIAyF,QAAAA,MAAM,CAACU,IAAP,CAAYb,MAAM,CAAChB,YAAP,EAAZ,EAAmCpE,IAAnC,EAAyCa,MAAzC,EAAiD,UAAS8E,GAAT,EAAc;AAC7D,cAAIF,WAAJ,EAAiB;AACf;AACD;;AAED,cAAIE,GAAJ,EAAS;AACPD,YAAAA,aAAa,CAACC,GAAD,CAAb;AACA;AACD;;AAEDJ,UAAAA,MAAM,CAACW,IAAP,CAAY,SAAZ,EAAuB,UAASC,GAAT,EAAc;AACnC,gBAAIV,WAAJ,EAAiB;AACf;AACD;;AAEDI,YAAAA,YAAY,CAACD,cAAD,CAAZ;AACAA,YAAAA,cAAc,GAAG,IAAjB;AACAL,YAAAA,MAAM,CAACa,KAAP;;AAEA,gBAAI9D,MAAM,GAAG3D,iBAAiB,CAACI,OAAlB,CAA0BsH,KAA1B,CAAgCF,GAAhC,CAAb;;AACA7D,YAAAA,MAAM,CAACK,oBAAP,GAA8B,IAAIhC,IAAJ,EAA9B;AAEA8E,YAAAA,WAAW,GAAG,IAAd;AACAJ,YAAAA,OAAO,CAAC/C,MAAD,CAAP;AACD,WAdD;AAeD,SAzBD;AA0BD,OAvDM,CAAP;AAwDD;AAED;AACR;AACA;AACA;;AA7EM,GAnRF,EAkWE;AACE3E,IAAAA,GAAG,EAAE,gBADP;AAEER,IAAAA,KAAK,EAAE,SAAS2E,cAAT,CAAwBD,IAAxB,EAA8B;AACnC;AACV;AACA;AACU,UAAIA,IAAI,CAAC5B,OAAL,GAAe,KAAKR,OAAL,CAAaM,WAAb,CAAyBE,OAA5C,EAAqD;AACnD,cAAM,IAAIsC,KAAJ,CACJ,oCACE,KAAK9C,OAAL,CAAaM,WAAb,CAAyBE,OAD3B,GAEE,QAFF,GAGE4B,IAAI,CAAC5B,OAJH,CAAN;AAMD;AAED;AACV;AACA;AACA;;;AACU,UACE4B,IAAI,CAACwC,aAAL,KAAuB,CAAvB,IACAxC,IAAI,CAACyE,OAAL,IAAgB,KAAK7G,OAAL,CAAaM,WAAb,CAAyBS,UAF3C,EAGE;AACA,cAAM,IAAI+B,KAAJ,CAAU,+CAAV,CAAN;AACD;AAED;AACV;AACA;;;AACU,UAAIgE,SAAS,GACX,CAAC1E,IAAI,CAAC0E,SAAL,CAAe7D,OAAf,KACC,KAAKjD,OAAL,CAAaM,WAAb,CAAyBW,aAAzB,CAAuCgC,OAAvC,EADF,IAEA,IAHF;AAIA,UAAI8D,cAAc,GAChB,CAAC3E,IAAI,CAAC2E,cAAL,CAAoB9D,OAApB,KACC,KAAKjD,OAAL,CAAaM,WAAb,CAAyBW,aAAzB,CAAuCgC,OAAvC,EADF,IAEA,IAHF;;AAIA,UACE6D,SAAS,GAAG,CAAZ,GAAgBC,cAAhB,IACA,KAAK/G,OAAL,CAAaM,WAAb,CAAyBM,aAF3B,EAGE;AACA,cAAM,IAAIkC,KAAJ,CAAU,yCAAV,CAAN;AACD;AAED;AACV;AACA;;;AACU,UAAIV,IAAI,CAACmB,eAAL,CAAqBN,OAArB,KAAiC,IAAI/B,IAAJ,GAAW+B,OAAX,EAArC,EAA2D;AACzD,cAAM,IAAIH,KAAJ,CACJ,mDADI,CAAN;AAGD;AACF;AAED;AACR;AACA;AACA;AACA;AACA;;AA3DM,GAlWF,CAFU,EAkaV,CACE;AACE5E,IAAAA,GAAG,EAAE,aADP;AAEER,IAAAA,KAAK,EAAE,SAASsJ,WAAT,GAAuB;AAC5B,UAAIhH,OAAO,GACTjC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBkC,SAAzC,GACIlC,SAAS,CAAC,CAAD,CADb,GAEIkC,SAHN;;AAKA,UAAI,CAACN,SAAL,EAAgB;AACdA,QAAAA,SAAS,GAAG,IAAIG,WAAJ,CAAgBE,OAAhB,CAAZ;AACD;;AAED,aAAOL,SAAP;AACD;AAbH,GADF,EAgBE;AACEzB,IAAAA,GAAG,EAAE,KADP;AAEER,IAAAA,KAAK,EAAE,SAASwH,GAAT,CAAa+B,MAAb,EAAqBjJ,MAArB,EAA6B;AAClC,UAAIkJ,IAAI,GACNnJ,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBkC,SAAzC,GACIlC,SAAS,CAAC,CAAD,CADb,GAEI,GAHN;AAIA,UAAIoJ,IAAI,GACNpJ,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBkC,SAAzC,GACIlC,SAAS,CAAC,CAAD,CADb,GAEI,MAHN;;AAKA,UAAIoJ,IAAI,KAAK,MAAb,EAAqB;AACnB,eACED,IAAI,CAACE,MAAL,CAAYpJ,MAAZ,EAAoBqJ,SAApB,CAA8B,CAA9B,EAAiCrJ,MAAM,GAAGiJ,MAAM,CAACjJ,MAAjD,IAA2DiJ,MAD7D;AAGD;;AAED,aACEA,MAAM,GAAGC,IAAI,CAACE,MAAL,CAAYpJ,MAAZ,EAAoBqJ,SAApB,CAA8B,CAA9B,EAAiCrJ,MAAM,GAAGiJ,MAAM,CAACjJ,MAAjD,CADX;AAGD;AArBH,GAhBF,EAuCE;AACEE,IAAAA,GAAG,EAAE,SADP;AAEER,IAAAA,KAAK,EAAE,SAAS2I,OAAT,CAAiBP,MAAjB,EAAyB;AAC9B,UAAI;AACFA,QAAAA,MAAM,CAACa,KAAP;AACD,OAFD,CAEE,OAAOhE,CAAP,EAAU,CACV;AACD;AACF;AARH,GAvCF,EAiDE;AACEzE,IAAAA,GAAG,EAAE,KADP;AAEER,IAAAA,KAAK,EAAE,SAAS4J,GAAT,CAAaC,MAAb,EAAqB;AAC1B,UAAIC,GAAG,GAAGD,MAAM,CAAClD,MAAP,CAAc,UAASmD,GAAT,EAAc9J,KAAd,EAAqB;AAC3C,eAAO8J,GAAG,GAAG9J,KAAb;AACD,OAFS,EAEP,CAFO,CAAV;AAIA,aAAO8J,GAAG,GAAGD,MAAM,CAACvJ,MAApB;AACD;AAED;AACR;AACA;AACA;AACA;AACA;;AAfM,GAjDF,EAkEE;AACEE,IAAAA,GAAG,EAAE,QADP;AAEER,IAAAA,KAAK,EAAE,SAAS8G,MAAT,CAAgB+C,MAAhB,EAAwB;AAC7B,UAAID,GAAG,GAAG,KAAKA,GAAL,CAASC,MAAT,CAAV;AAEA,UAAIE,WAAW,GAAGF,MAAM,CAACpG,GAAP,CAAW,UAASzD,KAAT,EAAgB;AAC3C,YAAIgK,IAAI,GAAGhK,KAAK,GAAG4J,GAAnB;AACA,eAAOI,IAAI,GAAGA,IAAd;AACD,OAHiB,CAAlB;AAKA,aAAOtE,IAAI,CAACuE,IAAL,CAAU,KAAKL,GAAL,CAASG,WAAT,CAAV,CAAP;AACD;AAXH,GAlEF,CAlaU,CAAZ;;AAofA,SAAO3H,WAAP;AACD,CArjBiB,EAAlB;;AAujBArC,OAAO,CAAC6B,OAAR,GAAkBQ,WAAlB","sourcesContent":["\"use strict\";\n\n/**\r\n * @typedef {Object} NtpTimeResult\r\n * @property {Date} now Correct real time\r\n * @property {Number} offset Offset local to real time in milliseconds\r\n * @property {Number} precision Precision in milliseconds\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends =\n  Object.assign ||\n  function(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n\nvar _createClass = (function() {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function(Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();\n\nvar _ntpPacketParser = require(\"ntp-packet-parser\");\n\nvar _ntpPacketParser2 = _interopRequireDefault(_ntpPacketParser);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar dgram = require(\"dgram\");\n\nvar singleton = void 0;\nvar lastPoll = void 0;\nvar lastResult = void 0;\n\nvar NtpTimeSync = (function() {\n  /**\r\n   * @param {Object} options\r\n   */\n  function NtpTimeSync() {\n    var _this = this;\n\n    var options =\n      arguments.length > 0 && arguments[0] !== undefined\n        ? arguments[0]\n        : undefined;\n\n    _classCallCheck(this, NtpTimeSync);\n\n    var defaultOptions = {\n      // list of NTP time servers, optionally including a port (defaults to options.ntpDefaults.port = 123)\n      servers: [\n        \"0.pool.ntp.org\",\n        \"1.pool.ntp.org\",\n        \"2.pool.ntp.org\",\n        \"3.pool.ntp.org\"\n      ],\n\n      // required amount of valid samples\n      sampleCount: 8,\n\n      // amount of time in milliseconds to wait for an NTP response\n      replyTimeout: 3000,\n\n      // defaults as of RFC5905\n      ntpDefaults: {\n        port: 123,\n        version: 4,\n        tolerance: 15e-6,\n        minPoll: 4,\n        maxPoll: 17,\n        maxDispersion: 16,\n        minDispersion: 0.005,\n        maxDistance: 1,\n        maxStratum: 16,\n        precision: -18,\n        referenceDate: new Date(\"Jan 01 1900 GMT\")\n      }\n    };\n\n    this.options = _extends({}, defaultOptions, options);\n\n    // convert servers to internal representation\n    this.options.servers = this.options.servers.map(function(server) {\n      return {\n        host: server.split(\":\", 2)[0],\n        port: Number(server.split(\":\", 2)[1]) || _this.options.ntpDefaults.port\n      };\n    });\n\n    this.samples = [];\n  }\n\n  /**\r\n   * Returns a singleton\r\n   * @param {Object} options\r\n   * @return {NtpTimeSync}\r\n   */\n\n  _createClass(\n    NtpTimeSync,\n    [\n      {\n        key: \"collectSamples\",\n        value: async function collectSamples(numSamples) {\n          var _this2 = this;\n\n          var ntpResults = [];\n          var retry = 0;\n\n          var _loop = async function _loop() {\n            var timePromises = [];\n\n            _this2.options.servers.forEach(function(server) {\n              timePromises.push(\n                _this2\n                  .getNetworkTime(server.host, server.port)\n                  .then(function(data) {\n                    _this2.acceptResponse(data);\n\n                    return data;\n                  })\n              );\n            });\n\n            // wait for NTP responses to arrive\n            ntpResults = ntpResults\n              .concat(\n                await Promise.all(\n                  timePromises.map(function(p) {\n                    return p.catch(function(e) {\n                      return e;\n                    });\n                  })\n                )\n              )\n              .filter(function(result) {\n                return !(result instanceof Error);\n              });\n\n            if (ntpResults.length === 0) {\n              retry++;\n            }\n          };\n\n          do {\n            await _loop();\n          } while (ntpResults.length < numSamples && retry < 3);\n\n          if (ntpResults.length === 0) {\n            throw new Error(\n              \"Connection error: Unable to get any NTP response after \" +\n                retry +\n                \" retries\"\n            );\n          }\n\n          // filter erroneous responses, use valid ones as samples\n          var samples = [];\n          ntpResults.forEach(function(data) {\n            var offsetSign =\n              data.transmitTimestamp.getTime() >\n              data.destinationTimestamp.getTime()\n                ? 1\n                : -1;\n\n            var offset =\n              (Math.abs(\n                data.receiveTimestamp.getTime() - data.originTimestamp.getTime()\n              ) +\n                Math.abs(\n                  data.transmitTimestamp.getTime() -\n                    data.destinationTimestamp.getTime()\n                )) /\n              2 *\n              offsetSign;\n\n            var delay = Math.max(\n              data.destinationTimestamp.getTime() -\n                data.originTimestamp.getTime() -\n                (data.receiveTimestamp.getTime() -\n                  data.transmitTimestamp.getTime()),\n              Math.pow(2, _this2.options.ntpDefaults.precision)\n            );\n\n            var dispersion =\n              Math.pow(2, data.precision) +\n              Math.pow(2, _this2.options.ntpDefaults.precision) +\n              _this2.options.ntpDefaults.tolerance *\n                (data.destinationTimestamp.getTime() -\n                  data.originTimestamp.getTime());\n\n            samples.push({\n              data: data,\n              offset: offset,\n              delay: delay,\n              dispersion: dispersion\n            });\n          });\n\n          // sort samples by ascending delay\n          samples.sort(function(a, b) {\n            return a.delay - b.delay;\n          });\n\n          // restrict to best n samples\n          return samples.slice(0, numSamples);\n        }\n\n        /**\r\n     * @param {Boolean} force Force NTP update\r\n     * @return {NtpTimeResult}\r\n     */\n      },\n      {\n        key: \"getTime\",\n        value: async function getTime() {\n          var force =\n            arguments.length > 0 && arguments[0] !== undefined\n              ? arguments[0]\n              : false;\n\n          if (\n            !force &&\n            lastPoll &&\n            Date.now() - lastPoll <\n              Math.pow(2, this.options.ntpDefaults.minPoll) * 1000\n          ) {\n            var _date = new Date();\n            _date.setUTCMilliseconds(\n              _date.getUTCMilliseconds() + lastResult.offset\n            );\n\n            return {\n              now: _date,\n              offset: lastResult.offset,\n              precision: lastResult.precision\n            };\n          }\n\n          // update time samples\n          this.samples = await this.collectSamples(this.options.sampleCount);\n\n          // calculate offset\n          var offset =\n            this.samples.reduce(function(acc, item) {\n              return acc + item.offset;\n            }, 0) / this.samples.length;\n\n          var precision = NtpTimeSync.stdDev(\n            this.samples.map(function(sample) {\n              return sample.offset;\n            })\n          );\n\n          lastResult = {\n            offset: offset,\n            precision: precision\n          };\n          lastPoll = Date.now();\n\n          var date = new Date();\n          date.setUTCMilliseconds(date.getUTCMilliseconds() + offset);\n\n          return {\n            now: date,\n            offset: offset,\n            precision: precision\n          };\n        }\n\n        /**\r\n     * Will return the correct timestamp when function was called\r\n     * @param {Boolean} force\r\n     * @return {Date}\r\n     */\n      },\n      {\n        key: \"now\",\n        value: async function now() {\n          var force =\n            arguments.length > 0 && arguments[0] !== undefined\n              ? arguments[0]\n              : false;\n\n          var now = new Date();\n          var result = await this.getTime(force);\n\n          now.setUTCMilliseconds(now.getUTCMilliseconds() + result.offset);\n          return now;\n        }\n\n        /**\r\n     * @param {String} string\r\n     * @param {Integer} length\r\n     * @param {String} char\r\n     * @param {String} side\r\n     * @private\r\n     */\n      },\n      {\n        key: \"createPacket\",\n\n        /**\r\n     * @param {Integer} leapIndicator, defaults to 3 (unsynchronized)\r\n     * @param {Integer} ntpVersion, defaults to `options.ntpDefaults.version`\r\n     * @param {Integer} mode, defaults to 3 (client)\r\n     * @return {Buffer}\r\n     * @private\r\n     */\n        value: function createPacket() {\n          var leapIndicator =\n            arguments.length > 0 && arguments[0] !== undefined\n              ? arguments[0]\n              : 3;\n          var ntpVersion =\n            arguments.length > 1 && arguments[1] !== undefined\n              ? arguments[1]\n              : null;\n          var mode =\n            arguments.length > 2 && arguments[2] !== undefined\n              ? arguments[2]\n              : 3;\n\n          ntpVersion = ntpVersion || this.options.ntpDefaults.version;\n\n          // generate NTP packet\n          var ntpData = new Array(48).fill(0);\n\n          ntpData[0] =\n            // Leap indicator (= 3, unsynchronized)\n            NtpTimeSync.pad((leapIndicator >>> 0).toString(2), 2) +\n            // NTP version (= 4)\n            NtpTimeSync.pad((ntpVersion >>> 0).toString(2), 3) +\n            // client mode (= 3)\n            NtpTimeSync.pad((mode >>> 0).toString(2), 3);\n\n          ntpData[0] = parseInt(ntpData[0], 2);\n\n          // origin timestamp\n          var baseTime =\n            new Date().getTime() -\n            this.options.ntpDefaults.referenceDate.getTime();\n          var seconds = baseTime / 1000;\n          var ntpTimestamp = (seconds * Math.pow(2, 32)).toString(2);\n          ntpTimestamp = NtpTimeSync.pad(ntpTimestamp, 64);\n\n          // origin timestamp\n          ntpData[24] = parseInt(ntpTimestamp.substr(0, 8), 2);\n          ntpData[25] = parseInt(ntpTimestamp.substr(8, 8), 2);\n          ntpData[26] = parseInt(ntpTimestamp.substr(16, 8), 2);\n          ntpData[27] = parseInt(ntpTimestamp.substr(24, 8), 2);\n          ntpData[28] = parseInt(ntpTimestamp.substr(32, 8), 2);\n          ntpData[29] = parseInt(ntpTimestamp.substr(40, 8), 2);\n          ntpData[30] = parseInt(ntpTimestamp.substr(48, 8), 2);\n          ntpData[31] = parseInt(ntpTimestamp.substr(56, 8), 2);\n\n          // transmit timestamp\n          ntpData[40] = parseInt(ntpTimestamp.substr(0, 8), 2);\n          ntpData[41] = parseInt(ntpTimestamp.substr(8, 8), 2);\n          ntpData[42] = parseInt(ntpTimestamp.substr(16, 8), 2);\n          ntpData[43] = parseInt(ntpTimestamp.substr(24, 8), 2);\n          ntpData[44] = parseInt(ntpTimestamp.substr(32, 8), 2);\n          ntpData[45] = parseInt(ntpTimestamp.substr(40, 8), 2);\n          ntpData[46] = parseInt(ntpTimestamp.substr(48, 8), 2);\n          ntpData[47] = parseInt(ntpTimestamp.substr(56, 8), 2);\n\n          return Buffer.from(ntpData);\n        }\n\n        /**\r\n     *\r\n     * @param client\r\n     * @private\r\n     */\n      },\n      {\n        key: \"getNetworkTime\",\n\n        /**\r\n     * @param {String} server\r\n     * @param {Integer} port\r\n     * @return {Promise|NTPPacket}\r\n     */\n        value: function getNetworkTime(server) {\n          var _this3 = this;\n\n          var port =\n            arguments.length > 1 && arguments[1] !== undefined\n              ? arguments[1]\n              : 123;\n\n          return new Promise(function(resolve, reject) {\n            var client = dgram.createSocket(\"udp4\");\n            var hasFinished = false;\n\n            var errorCallback = function errorCallback(err) {\n              if (timeoutHandler) {\n                clearTimeout(timeoutHandler);\n                timeoutHandler = null;\n              }\n\n              if (hasFinished) {\n                return;\n              }\n\n              NtpTimeSync.cleanup(client);\n\n              hasFinished = true;\n              reject(err);\n            };\n\n            client.on(\"error\", function(err) {\n              return errorCallback;\n            });\n\n            // setup timeout\n            var timeoutHandler = setTimeout(function() {\n              errorCallback(new Error(\"Timeout waiting for NTP response.\"));\n            }, _this3.options.replyTimeout);\n\n            client.send(_this3.createPacket(), port, server, function(err) {\n              if (hasFinished) {\n                return;\n              }\n\n              if (err) {\n                errorCallback(err);\n                return;\n              }\n\n              client.once(\"message\", function(msg) {\n                if (hasFinished) {\n                  return;\n                }\n\n                clearTimeout(timeoutHandler);\n                timeoutHandler = null;\n                client.close();\n\n                var result = _ntpPacketParser2.default.parse(msg);\n                result.destinationTimestamp = new Date();\n\n                hasFinished = true;\n                resolve(result);\n              });\n            });\n          });\n        }\n\n        /**\r\n     * Test if response is acceptable for synchronization\r\n     * @param {NTPPacket} data\r\n     */\n      },\n      {\n        key: \"acceptResponse\",\n        value: function acceptResponse(data) {\n          /*\r\n       * Format error\r\n       */\n          if (data.version > this.options.ntpDefaults.version) {\n            throw new Error(\n              \"Format error: Expected version \" +\n                this.options.ntpDefaults.version +\n                \", got \" +\n                data.version\n            );\n          }\n\n          /*\r\n       * A stratum error occurs if (1) the server has never been\r\n       * synchronized, (2) the server stratum is invalid.\r\n       */\n          if (\n            data.leapIndicator === 3 ||\n            data.stratum >= this.options.ntpDefaults.maxStratum\n          ) {\n            throw new Error(\"Stratum error: Remote clock is unsynchronized\");\n          }\n\n          /*\r\n       * Verify valid root distance.\r\n       */\n          var rootDelay =\n            (data.rootDelay.getTime() -\n              this.options.ntpDefaults.referenceDate.getTime()) /\n            1000;\n          var rootDispersion =\n            (data.rootDispersion.getTime() -\n              this.options.ntpDefaults.referenceDate.getTime()) /\n            1000;\n          if (\n            rootDelay / 2 + rootDispersion >=\n            this.options.ntpDefaults.maxDispersion\n          ) {\n            throw new Error(\"Distance error: Root distance too large\");\n          }\n\n          /*\r\n       * Verify origin timestamp\r\n       */\n          if (data.originTimestamp.getTime() > new Date().getTime()) {\n            throw new Error(\n              \"Format error: Origin timestamp is from the future\"\n            );\n          }\n        }\n\n        /**\r\n     * Average for a list of numbers\r\n     * @param {Array} values\r\n     * @return {number}\r\n     * @private\r\n     */\n      }\n    ],\n    [\n      {\n        key: \"getInstance\",\n        value: function getInstance() {\n          var options =\n            arguments.length > 0 && arguments[0] !== undefined\n              ? arguments[0]\n              : undefined;\n\n          if (!singleton) {\n            singleton = new NtpTimeSync(options);\n          }\n\n          return singleton;\n        }\n      },\n      {\n        key: \"pad\",\n        value: function pad(string, length) {\n          var char =\n            arguments.length > 2 && arguments[2] !== undefined\n              ? arguments[2]\n              : \"0\";\n          var side =\n            arguments.length > 3 && arguments[3] !== undefined\n              ? arguments[3]\n              : \"left\";\n\n          if (side === \"left\") {\n            return (\n              char.repeat(length).substring(0, length - string.length) + string\n            );\n          }\n\n          return (\n            string + char.repeat(length).substring(0, length - string.length)\n          );\n        }\n      },\n      {\n        key: \"cleanup\",\n        value: function cleanup(client) {\n          try {\n            client.close();\n          } catch (e) {\n            // ignore, as we just want to cleanup\n          }\n        }\n      },\n      {\n        key: \"avg\",\n        value: function avg(values) {\n          var sum = values.reduce(function(sum, value) {\n            return sum + value;\n          }, 0);\n\n          return sum / values.length;\n        }\n\n        /**\r\n     * Standard deviation for a list of numbers\r\n     * @param {Array} values\r\n     * @return {number}\r\n     * @private\r\n     */\n      },\n      {\n        key: \"stdDev\",\n        value: function stdDev(values) {\n          var avg = this.avg(values);\n\n          var squareDiffs = values.map(function(value) {\n            var diff = value - avg;\n            return diff * diff;\n          });\n\n          return Math.sqrt(this.avg(squareDiffs));\n        }\n      }\n    ]\n  );\n\n  return NtpTimeSync;\n})();\n\nexports.default = NtpTimeSync;\n"]},"metadata":{},"sourceType":"script"}