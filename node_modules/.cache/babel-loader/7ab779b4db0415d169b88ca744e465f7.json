{"ast":null,"code":"/*\r\n * ntp-client\r\n * https://github.com/moonpyk/node-ntp-client\r\n *\r\n * Copyright (c) 2013 Clément Bourgeois\r\n * Licensed under the MIT license.\r\n */\n(function (exports) {\n  \"use strict\";\n\n  var dgram = require('dgram');\n\n  exports.defaultNtpPort = 123;\n  exports.defaultNtpServer = \"pool.ntp.org\";\n  /**\r\n   * Amount of acceptable time to await for a response from the remote server.\r\n   * Configured default to 10 seconds.\r\n   */\n\n  exports.ntpReplyTimeout = 10000;\n  /**\r\n   * Fetches the current NTP Time from the given server and port.\r\n   * @param {string} server IP/Hostname of the remote NTP Server\r\n   * @param {number} port Remote NTP Server port number\r\n   * @param {function(Object, Date)} callback(err, date) Async callback for\r\n   * the result date or eventually error.\r\n   */\n\n  exports.getNetworkTime = function (server, port, callback) {\n    if (callback === null || typeof callback !== \"function\") {\n      return;\n    }\n\n    server = server || exports.defaultNtpServer;\n    port = port || exports.defaultNtpPort;\n    var client = dgram.createSocket(\"udp4\"),\n        ntpData = new Buffer(48); // RFC 2030 -> LI = 0 (no warning, 2 bits), VN = 3 (IPv4 only, 3 bits), Mode = 3 (Client Mode, 3 bits) -> 1 byte\n    // -> rtol(LI, 6) ^ rotl(VN, 3) ^ rotl(Mode, 0)\n    // -> = 0x00 ^ 0x18 ^ 0x03\n\n    ntpData[0] = 0x1B;\n\n    for (var i = 1; i < 48; i++) {\n      ntpData[i] = 0;\n    }\n\n    var timeout = setTimeout(function () {\n      client.close();\n      callback(\"Timeout waiting for NTP response.\", null);\n    }, exports.ntpReplyTimeout); // Some errors can happen before/after send() or cause send() to was impossible.\n    // Some errors will also be given to the send() callback.\n    // We keep a flag, therefore, to prevent multiple callbacks.\n    // NOTE : the error callback is not generalised, as the client has to lose the connection also, apparently.\n\n    var errorFired = false;\n    client.on('error', function (err) {\n      if (errorFired) {\n        return;\n      }\n\n      callback(err, null);\n      errorFired = true;\n      clearTimeout(timeout);\n    });\n    client.send(ntpData, 0, ntpData.length, port, server, function (err) {\n      if (err) {\n        if (errorFired) {\n          return;\n        }\n\n        clearTimeout(timeout);\n        callback(err, null);\n        errorFired = true;\n        client.close();\n        return;\n      }\n\n      client.once('message', function (msg) {\n        clearTimeout(timeout);\n        client.close(); // Offset to get to the \"Transmit Timestamp\" field (time at which the reply\n        // departed the server for the client, in 64-bit timestamp format.\"\n\n        var offsetTransmitTime = 40,\n            intpart = 0,\n            fractpart = 0; // Get the seconds part\n\n        for (var i = 0; i <= 3; i++) {\n          intpart = 256 * intpart + msg[offsetTransmitTime + i];\n        } // Get the seconds fraction\n\n\n        for (i = 4; i <= 7; i++) {\n          fractpart = 256 * fractpart + msg[offsetTransmitTime + i];\n        }\n\n        var milliseconds = intpart * 1000 + fractpart * 1000 / 0x100000000; // **UTC** time\n\n        var date = new Date(\"Jan 01 1900 GMT\");\n        date.setUTCMilliseconds(date.getUTCMilliseconds() + milliseconds);\n        callback(null, date);\n      });\n    });\n  };\n\n  exports.demo = function (argv) {\n    exports.getNetworkTime(exports.defaultNtpServer, exports.defaultNtpPort, function (err, date) {\n      if (err) {\n        console.error(err);\n        return;\n      }\n\n      console.log(date);\n    });\n  };\n})(exports);","map":{"version":3,"sources":["/home/main/Documents/dino-ranch-landing/node_modules/ntp-client/lib/ntp-client.js"],"names":["exports","dgram","require","defaultNtpPort","defaultNtpServer","ntpReplyTimeout","getNetworkTime","server","port","callback","client","createSocket","ntpData","Buffer","i","timeout","setTimeout","close","errorFired","on","err","clearTimeout","send","length","once","msg","offsetTransmitTime","intpart","fractpart","milliseconds","date","Date","setUTCMilliseconds","getUTCMilliseconds","demo","argv","console","error","log"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC,WAAUA,OAAV,EAAmB;AAChB;;AAEA,MAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AAEAF,EAAAA,OAAO,CAACG,cAAR,GAAyB,GAAzB;AACAH,EAAAA,OAAO,CAACI,gBAAR,GAA2B,cAA3B;AAEA;AACJ;AACA;AACA;;AACIJ,EAAAA,OAAO,CAACK,eAAR,GAA0B,KAA1B;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACIL,EAAAA,OAAO,CAACM,cAAR,GAAyB,UAAUC,MAAV,EAAkBC,IAAlB,EAAwBC,QAAxB,EAAkC;AACvD,QAAIA,QAAQ,KAAK,IAAb,IAAqB,OAAOA,QAAP,KAAoB,UAA7C,EAAyD;AACrD;AACH;;AAEDF,IAAAA,MAAM,GAAGA,MAAM,IAAIP,OAAO,CAACI,gBAA3B;AACAI,IAAAA,IAAI,GAAGA,IAAI,IAAIR,OAAO,CAACG,cAAvB;AAEA,QAAIO,MAAM,GAAGT,KAAK,CAACU,YAAN,CAAmB,MAAnB,CAAb;AAAA,QACIC,OAAO,GAAG,IAAIC,MAAJ,CAAW,EAAX,CADd,CARuD,CAWvD;AACA;AACA;;AACAD,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAb;;AAEA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBF,MAAAA,OAAO,CAACE,CAAD,CAAP,GAAa,CAAb;AACH;;AAED,QAAIC,OAAO,GAAGC,UAAU,CAAC,YAAY;AACjCN,MAAAA,MAAM,CAACO,KAAP;AACAR,MAAAA,QAAQ,CAAC,mCAAD,EAAsC,IAAtC,CAAR;AACH,KAHuB,EAGrBT,OAAO,CAACK,eAHa,CAAxB,CApBuD,CAyBvD;AACA;AACA;AACA;;AACA,QAAIa,UAAU,GAAG,KAAjB;AAEAR,IAAAA,MAAM,CAACS,EAAP,CAAU,OAAV,EAAmB,UAAUC,GAAV,EAAe;AAC9B,UAAIF,UAAJ,EAAgB;AACZ;AACH;;AAEDT,MAAAA,QAAQ,CAACW,GAAD,EAAM,IAAN,CAAR;AACAF,MAAAA,UAAU,GAAG,IAAb;AAEAG,MAAAA,YAAY,CAACN,OAAD,CAAZ;AACH,KATD;AAWAL,IAAAA,MAAM,CAACY,IAAP,CAAYV,OAAZ,EAAqB,CAArB,EAAwBA,OAAO,CAACW,MAAhC,EAAwCf,IAAxC,EAA8CD,MAA9C,EAAsD,UAAUa,GAAV,EAAe;AACjE,UAAIA,GAAJ,EAAS;AACL,YAAIF,UAAJ,EAAgB;AACZ;AACH;;AACDG,QAAAA,YAAY,CAACN,OAAD,CAAZ;AACAN,QAAAA,QAAQ,CAACW,GAAD,EAAM,IAAN,CAAR;AACAF,QAAAA,UAAU,GAAG,IAAb;AACAR,QAAAA,MAAM,CAACO,KAAP;AACA;AACH;;AAEDP,MAAAA,MAAM,CAACc,IAAP,CAAY,SAAZ,EAAuB,UAAUC,GAAV,EAAe;AAClCJ,QAAAA,YAAY,CAACN,OAAD,CAAZ;AACAL,QAAAA,MAAM,CAACO,KAAP,GAFkC,CAIlC;AACA;;AACA,YAAIS,kBAAkB,GAAG,EAAzB;AAAA,YACIC,OAAO,GAAG,CADd;AAAA,YAEIC,SAAS,GAAG,CAFhB,CANkC,CAUlC;;AACA,aAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBa,UAAAA,OAAO,GAAG,MAAMA,OAAN,GAAgBF,GAAG,CAACC,kBAAkB,GAAGZ,CAAtB,CAA7B;AACH,SAbiC,CAelC;;;AACA,aAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,IAAI,CAAjB,EAAoBA,CAAC,EAArB,EAAyB;AACrBc,UAAAA,SAAS,GAAG,MAAMA,SAAN,GAAkBH,GAAG,CAACC,kBAAkB,GAAGZ,CAAtB,CAAjC;AACH;;AAED,YAAIe,YAAY,GAAIF,OAAO,GAAG,IAAV,GAAkBC,SAAS,GAAG,IAAb,GAAqB,WAA1D,CApBkC,CAsBlC;;AACA,YAAIE,IAAI,GAAG,IAAIC,IAAJ,CAAS,iBAAT,CAAX;AACAD,QAAAA,IAAI,CAACE,kBAAL,CAAwBF,IAAI,CAACG,kBAAL,KAA4BJ,YAApD;AAEApB,QAAAA,QAAQ,CAAC,IAAD,EAAOqB,IAAP,CAAR;AACH,OA3BD;AA4BH,KAxCD;AAyCH,GAnFD;;AAqFA9B,EAAAA,OAAO,CAACkC,IAAR,GAAe,UAAUC,IAAV,EAAgB;AAC3BnC,IAAAA,OAAO,CAACM,cAAR,CACIN,OAAO,CAACI,gBADZ,EAEIJ,OAAO,CAACG,cAFZ,EAGI,UAAUiB,GAAV,EAAeU,IAAf,EAAqB;AACjB,UAAIV,GAAJ,EAAS;AACLgB,QAAAA,OAAO,CAACC,KAAR,CAAcjB,GAAd;AACA;AACH;;AAEDgB,MAAAA,OAAO,CAACE,GAAR,CAAYR,IAAZ;AACH,KAVL;AAWH,GAZD;AAaH,CAvHA,EAuHC9B,OAvHD,CAAD","sourcesContent":["/*\r\n * ntp-client\r\n * https://github.com/moonpyk/node-ntp-client\r\n *\r\n * Copyright (c) 2013 Clément Bourgeois\r\n * Licensed under the MIT license.\r\n */\r\n\r\n(function (exports) {\r\n    \"use strict\";\r\n\r\n    var dgram = require('dgram');\r\n\r\n    exports.defaultNtpPort = 123;\r\n    exports.defaultNtpServer = \"pool.ntp.org\";\r\n\r\n    /**\r\n     * Amount of acceptable time to await for a response from the remote server.\r\n     * Configured default to 10 seconds.\r\n     */\r\n    exports.ntpReplyTimeout = 10000;\r\n\r\n    /**\r\n     * Fetches the current NTP Time from the given server and port.\r\n     * @param {string} server IP/Hostname of the remote NTP Server\r\n     * @param {number} port Remote NTP Server port number\r\n     * @param {function(Object, Date)} callback(err, date) Async callback for\r\n     * the result date or eventually error.\r\n     */\r\n    exports.getNetworkTime = function (server, port, callback) {\r\n        if (callback === null || typeof callback !== \"function\") {\r\n            return;\r\n        }\r\n\r\n        server = server || exports.defaultNtpServer;\r\n        port = port || exports.defaultNtpPort;\r\n\r\n        var client = dgram.createSocket(\"udp4\"),\r\n            ntpData = new Buffer(48);\r\n\r\n        // RFC 2030 -> LI = 0 (no warning, 2 bits), VN = 3 (IPv4 only, 3 bits), Mode = 3 (Client Mode, 3 bits) -> 1 byte\r\n        // -> rtol(LI, 6) ^ rotl(VN, 3) ^ rotl(Mode, 0)\r\n        // -> = 0x00 ^ 0x18 ^ 0x03\r\n        ntpData[0] = 0x1B;\r\n\r\n        for (var i = 1; i < 48; i++) {\r\n            ntpData[i] = 0;\r\n        }\r\n\r\n        var timeout = setTimeout(function () {\r\n            client.close();\r\n            callback(\"Timeout waiting for NTP response.\", null);\r\n        }, exports.ntpReplyTimeout);\r\n\r\n        // Some errors can happen before/after send() or cause send() to was impossible.\r\n        // Some errors will also be given to the send() callback.\r\n        // We keep a flag, therefore, to prevent multiple callbacks.\r\n        // NOTE : the error callback is not generalised, as the client has to lose the connection also, apparently.\r\n        var errorFired = false;\r\n\r\n        client.on('error', function (err) {\r\n            if (errorFired) {\r\n                return;\r\n            }\r\n\r\n            callback(err, null);\r\n            errorFired = true;\r\n\r\n            clearTimeout(timeout);\r\n        });\r\n\r\n        client.send(ntpData, 0, ntpData.length, port, server, function (err) {\r\n            if (err) {\r\n                if (errorFired) {\r\n                    return;\r\n                }\r\n                clearTimeout(timeout);\r\n                callback(err, null);\r\n                errorFired = true;\r\n                client.close();\r\n                return;\r\n            }\r\n\r\n            client.once('message', function (msg) {\r\n                clearTimeout(timeout);\r\n                client.close();\r\n\r\n                // Offset to get to the \"Transmit Timestamp\" field (time at which the reply\r\n                // departed the server for the client, in 64-bit timestamp format.\"\r\n                var offsetTransmitTime = 40,\r\n                    intpart = 0,\r\n                    fractpart = 0;\r\n\r\n                // Get the seconds part\r\n                for (var i = 0; i <= 3; i++) {\r\n                    intpart = 256 * intpart + msg[offsetTransmitTime + i];\r\n                }\r\n\r\n                // Get the seconds fraction\r\n                for (i = 4; i <= 7; i++) {\r\n                    fractpart = 256 * fractpart + msg[offsetTransmitTime + i];\r\n                }\r\n\r\n                var milliseconds = (intpart * 1000 + (fractpart * 1000) / 0x100000000);\r\n\r\n                // **UTC** time\r\n                var date = new Date(\"Jan 01 1900 GMT\");\r\n                date.setUTCMilliseconds(date.getUTCMilliseconds() + milliseconds);\r\n\r\n                callback(null, date);\r\n            });\r\n        });\r\n    };\r\n\r\n    exports.demo = function (argv) {\r\n        exports.getNetworkTime(\r\n            exports.defaultNtpServer,\r\n            exports.defaultNtpPort,\r\n            function (err, date) {\r\n                if (err) {\r\n                    console.error(err);\r\n                    return;\r\n                }\r\n\r\n                console.log(date);\r\n            });\r\n    };\r\n}(exports));\r\n"]},"metadata":{},"sourceType":"script"}