{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { Dimensions, NativeEventEmitter, NativeModules, Platform } from 'react-native';\nimport { useOnEvent, useOnMount } from './internal/asyncHookWrappers';\nimport devicesWithNotch from './internal/devicesWithNotch';\nimport RNDeviceInfo from './internal/nativeInterface';\nimport { getSupportedPlatformInfoFunctions, getSupportedPlatformInfoSync, getSupportedPlatformInfoAsync } from './internal/supported-platform-info';\nimport { AsyncHookResult, DeviceType, LocationProviderInfo, PowerState } from './internal/types';\nexport const getUniqueId = () => getSupportedPlatformInfoSync({\n  defaultValue: 'unknown',\n  memoKey: 'uniqueId',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.uniqueId\n});\nlet uniqueId;\nexport async function syncUniqueId() {\n  if (Platform.OS === 'ios') {\n    uniqueId = await RNDeviceInfo.syncUniqueId();\n  } else {\n    uniqueId = getUniqueId();\n  }\n\n  return uniqueId;\n}\nexport const [getInstanceId, getInstanceIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'instanceId',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getInstanceId(),\n  syncGetter: () => RNDeviceInfo.getInstanceIdSync(),\n  defaultValue: 'unknown'\n});\nexport const [getSerialNumber, getSerialNumberSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'serialNumber',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSerialNumber(),\n  syncGetter: () => RNDeviceInfo.getSerialNumberSync(),\n  defaultValue: 'unknown'\n});\nexport const [getAndroidId, getAndroidIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'androidId',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getAndroidId(),\n  syncGetter: () => RNDeviceInfo.getAndroidIdSync(),\n  defaultValue: 'unknown'\n});\nexport const [getIpAddress, getIpAddressSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getIpAddress(),\n  syncGetter: () => RNDeviceInfo.getIpAddressSync(),\n  defaultValue: 'unknown'\n});\nexport const [isCameraPresent, isCameraPresentSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.isCameraPresent(),\n  syncGetter: () => RNDeviceInfo.isCameraPresentSync(),\n  defaultValue: false\n});\nexport async function getMacAddress() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddress();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n\n  return 'unknown';\n}\nexport function getMacAddressSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddressSync();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n\n  return 'unknown';\n}\nexport const getDeviceId = () => getSupportedPlatformInfoSync({\n  defaultValue: 'unknown',\n  memoKey: 'deviceId',\n  getter: () => RNDeviceInfo.deviceId,\n  supportedPlatforms: ['android', 'ios', 'windows']\n});\nexport const [getManufacturer, getManufacturerSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'manufacturer',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => Platform.OS == 'ios' ? Promise.resolve('Apple') : RNDeviceInfo.getSystemManufacturer(),\n  syncGetter: () => Platform.OS == 'ios' ? 'Apple' : RNDeviceInfo.getSystemManufacturerSync(),\n  defaultValue: 'unknown'\n});\nexport const getModel = () => getSupportedPlatformInfoSync({\n  memoKey: 'model',\n  defaultValue: 'unknown',\n  supportedPlatforms: ['ios', 'android', 'windows'],\n  getter: () => RNDeviceInfo.model\n});\nexport const getBrand = () => getSupportedPlatformInfoSync({\n  memoKey: 'brand',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  defaultValue: 'unknown',\n  getter: () => RNDeviceInfo.brand\n});\nexport const getSystemName = () => getSupportedPlatformInfoSync({\n  defaultValue: 'unknown',\n  supportedPlatforms: ['ios', 'android', 'windows'],\n  memoKey: 'systemName',\n  getter: () => Platform.select({\n    ios: RNDeviceInfo.systemName,\n    android: 'Android',\n    windows: 'Windows',\n    default: 'unknown'\n  })\n});\nexport const getSystemVersion = () => getSupportedPlatformInfoSync({\n  defaultValue: 'unknown',\n  getter: () => RNDeviceInfo.systemVersion,\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  memoKey: 'systemVersion'\n});\nexport const [getBuildId, getBuildIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'buildId',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getBuildId(),\n  syncGetter: () => RNDeviceInfo.getBuildIdSync(),\n  defaultValue: 'unknown'\n});\nexport const [getApiLevel, getApiLevelSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'apiLevel',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getApiLevel(),\n  syncGetter: () => RNDeviceInfo.getApiLevelSync(),\n  defaultValue: -1\n});\nexport const getBundleId = () => getSupportedPlatformInfoSync({\n  memoKey: 'bundleId',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  defaultValue: 'unknown',\n  getter: () => RNDeviceInfo.bundleId\n});\nexport const [getInstallerPackageName, getInstallerPackageNameSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'installerPackageName',\n  supportedPlatforms: ['android', 'windows'],\n  getter: () => RNDeviceInfo.getInstallerPackageName(),\n  syncGetter: () => RNDeviceInfo.getInstallerPackageNameSync(),\n  defaultValue: 'unknown'\n});\nexport const getApplicationName = () => getSupportedPlatformInfoSync({\n  memoKey: 'appName',\n  defaultValue: 'unknown',\n  getter: () => RNDeviceInfo.appName,\n  supportedPlatforms: ['android', 'ios', 'windows']\n});\nexport const getBuildNumber = () => getSupportedPlatformInfoSync({\n  memoKey: 'buildNumber',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.buildNumber,\n  defaultValue: 'unknown'\n});\nexport const getVersion = () => getSupportedPlatformInfoSync({\n  memoKey: 'version',\n  defaultValue: 'unknown',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.appVersion\n});\nexport function getReadableVersion() {\n  return getVersion() + '.' + getBuildNumber();\n}\nexport const [getDeviceName, getDeviceNameSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'deviceName',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getDeviceName(),\n  syncGetter: () => RNDeviceInfo.getDeviceNameSync(),\n  defaultValue: 'unknown'\n});\nexport const [getUsedMemory, getUsedMemorySync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getUsedMemory(),\n  syncGetter: () => RNDeviceInfo.getUsedMemorySync(),\n  defaultValue: -1\n});\nexport const getUserAgent = () => getSupportedPlatformInfoAsync({\n  memoKey: 'userAgent',\n  defaultValue: 'unknown',\n  supportedPlatforms: ['android', 'ios', 'web'],\n  getter: () => RNDeviceInfo.getUserAgent()\n});\nexport const getUserAgentSync = () => getSupportedPlatformInfoSync({\n  memoKey: 'userAgent',\n  defaultValue: 'unknown',\n  supportedPlatforms: ['android', 'web'],\n  getter: () => RNDeviceInfo.getUserAgentSync()\n});\nexport const [getFontScale, getFontScaleSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getFontScale(),\n  syncGetter: () => RNDeviceInfo.getFontScaleSync(),\n  defaultValue: -1\n});\nexport const [getBootloader, getBootloaderSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'bootloader',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getBootloader(),\n  syncGetter: () => RNDeviceInfo.getBootloaderSync(),\n  defaultValue: 'unknown'\n});\nexport const [getDevice, getDeviceSync] = getSupportedPlatformInfoFunctions({\n  getter: () => RNDeviceInfo.getDevice(),\n  syncGetter: () => RNDeviceInfo.getDeviceSync(),\n  defaultValue: 'unknown',\n  memoKey: 'device',\n  supportedPlatforms: ['android']\n});\nexport const [getDisplay, getDisplaySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'display',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getDisplay(),\n  syncGetter: () => RNDeviceInfo.getDisplaySync(),\n  defaultValue: 'unknown'\n});\nexport const [getFingerprint, getFingerprintSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'fingerprint',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getFingerprint(),\n  syncGetter: () => RNDeviceInfo.getFingerprintSync(),\n  defaultValue: 'unknown'\n});\nexport const [getHardware, getHardwareSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'hardware',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getHardware(),\n  syncGetter: () => RNDeviceInfo.getHardwareSync(),\n  defaultValue: 'unknown'\n});\nexport const [getHost, getHostSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'host',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getHost(),\n  syncGetter: () => RNDeviceInfo.getHostSync(),\n  defaultValue: 'unknown'\n});\nexport const [getProduct, getProductSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'product',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getProduct(),\n  syncGetter: () => RNDeviceInfo.getProductSync(),\n  defaultValue: 'unknown'\n});\nexport const [getTags, getTagsSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'tags',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getTags(),\n  syncGetter: () => RNDeviceInfo.getTagsSync(),\n  defaultValue: 'unknown'\n});\nexport const [getType, getTypeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'type',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getType(),\n  syncGetter: () => RNDeviceInfo.getTypeSync(),\n  defaultValue: 'unknown'\n});\nexport const [getBaseOs, getBaseOsSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'baseOs',\n  supportedPlatforms: ['android', 'web', 'windows'],\n  getter: () => RNDeviceInfo.getBaseOs(),\n  syncGetter: () => RNDeviceInfo.getBaseOsSync(),\n  defaultValue: 'unknown'\n});\nexport const [getPreviewSdkInt, getPreviewSdkIntSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'previewSdkInt',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getPreviewSdkInt(),\n  syncGetter: () => RNDeviceInfo.getPreviewSdkIntSync(),\n  defaultValue: -1\n});\nexport const [getSecurityPatch, getSecurityPatchSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'securityPatch',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSecurityPatch(),\n  syncGetter: () => RNDeviceInfo.getSecurityPatchSync(),\n  defaultValue: 'unknown'\n});\nexport const [getCodename, getCodenameSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'codeName',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getCodename(),\n  syncGetter: () => RNDeviceInfo.getCodenameSync(),\n  defaultValue: 'unknown'\n});\nexport const [getIncremental, getIncrementalSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'incremental',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getIncremental(),\n  syncGetter: () => RNDeviceInfo.getIncrementalSync(),\n  defaultValue: 'unknown'\n});\nexport const [isEmulator, isEmulatorSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'emulator',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.isEmulator(),\n  syncGetter: () => RNDeviceInfo.isEmulatorSync(),\n  defaultValue: false\n});\nexport const isTablet = () => getSupportedPlatformInfoSync({\n  defaultValue: false,\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  memoKey: 'tablet',\n  getter: () => RNDeviceInfo.isTablet\n});\nexport const [isPinOrFingerprintSet, isPinOrFingerprintSetSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.isPinOrFingerprintSet(),\n  syncGetter: () => RNDeviceInfo.isPinOrFingerprintSetSync(),\n  defaultValue: false\n});\nlet notch;\nexport function hasNotch() {\n  if (notch === undefined) {\n    let _brand = getBrand();\n\n    let _model = getModel();\n\n    notch = devicesWithNotch.findIndex(item => item.brand.toLowerCase() === _brand.toLowerCase() && item.model.toLowerCase() === _model.toLowerCase()) !== -1;\n  }\n\n  return notch;\n}\nexport const [hasGms, hasGmsSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.hasGms(),\n  syncGetter: () => RNDeviceInfo.hasGmsSync(),\n  defaultValue: false\n});\nexport const [hasHms, hasHmsSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.hasHms(),\n  syncGetter: () => RNDeviceInfo.hasHmsSync(),\n  defaultValue: false\n});\nexport const [getFirstInstallTime, getFirstInstallTimeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'firstInstallTime',\n  supportedPlatforms: ['android', 'windows'],\n  getter: () => RNDeviceInfo.getFirstInstallTime(),\n  syncGetter: () => RNDeviceInfo.getFirstInstallTimeSync(),\n  defaultValue: -1\n});\nexport const [getInstallReferrer, getInstallReferrerSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'installReferrer',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getInstallReferrer(),\n  syncGetter: () => RNDeviceInfo.getInstallReferrerSync(),\n  defaultValue: 'unknown'\n});\nexport const [getLastUpdateTime, getLastUpdateTimeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'lastUpdateTime',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getLastUpdateTime(),\n  syncGetter: () => RNDeviceInfo.getLastUpdateTimeSync(),\n  defaultValue: -1\n});\nexport const [getPhoneNumber, getPhoneNumberSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getPhoneNumber(),\n  syncGetter: () => RNDeviceInfo.getPhoneNumberSync(),\n  defaultValue: 'unknown'\n});\nexport const [getCarrier, getCarrierSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getCarrier(),\n  syncGetter: () => RNDeviceInfo.getCarrierSync(),\n  defaultValue: 'unknown'\n});\nexport const [getTotalMemory, getTotalMemorySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'totalMemory',\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getTotalMemory(),\n  syncGetter: () => RNDeviceInfo.getTotalMemorySync(),\n  defaultValue: -1\n});\nexport const [getMaxMemory, getMaxMemorySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'maxMemory',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getMaxMemory(),\n  syncGetter: () => RNDeviceInfo.getMaxMemorySync(),\n  defaultValue: -1\n});\nexport const [getTotalDiskCapacity, getTotalDiskCapacitySync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getTotalDiskCapacity(),\n  syncGetter: () => RNDeviceInfo.getTotalDiskCapacitySync(),\n  defaultValue: -1\n});\nexport async function getTotalDiskCapacityOld() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getTotalDiskCapacityOld();\n  }\n\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getTotalDiskCapacity();\n  }\n\n  return -1;\n}\nexport function getTotalDiskCapacityOldSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getTotalDiskCapacityOldSync();\n  }\n\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getTotalDiskCapacitySync();\n  }\n\n  return -1;\n}\nexport const [getFreeDiskStorage, getFreeDiskStorageSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getFreeDiskStorage(),\n  syncGetter: () => RNDeviceInfo.getFreeDiskStorageSync(),\n  defaultValue: -1\n});\nexport async function getFreeDiskStorageOld() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getFreeDiskStorageOld();\n  }\n\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getFreeDiskStorage();\n  }\n\n  return -1;\n}\nexport function getFreeDiskStorageOldSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getFreeDiskStorageOldSync();\n  }\n\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getFreeDiskStorageSync();\n  }\n\n  return -1;\n}\nexport const [getBatteryLevel, getBatteryLevelSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getBatteryLevel(),\n  syncGetter: () => RNDeviceInfo.getBatteryLevelSync(),\n  defaultValue: -1\n});\nexport const [getPowerState, getPowerStateSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['ios', 'android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getPowerState(),\n  syncGetter: () => RNDeviceInfo.getPowerStateSync(),\n  defaultValue: {}\n});\nexport const [isBatteryCharging, isBatteryChargingSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.isBatteryCharging(),\n  syncGetter: () => RNDeviceInfo.isBatteryChargingSync(),\n  defaultValue: false\n});\nexport async function isLandscape() {\n  return Promise.resolve(isLandscapeSync());\n}\nexport function isLandscapeSync() {\n  const {\n    height,\n    width\n  } = Dimensions.get('window');\n  return width >= height;\n}\nexport const [isAirplaneMode, isAirplaneModeSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'web'],\n  getter: () => RNDeviceInfo.isAirplaneMode(),\n  syncGetter: () => RNDeviceInfo.isAirplaneModeSync(),\n  defaultValue: false\n});\nexport const getDeviceType = () => {\n  if (Platform.OS === 'windows') return 'Desktop';\n  return getSupportedPlatformInfoSync({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.deviceType\n  });\n};\nexport const getDeviceTypeSync = () => {\n  if (Platform.OS === 'windows') return 'Desktop';\n  return getSupportedPlatformInfoSync({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.deviceType\n  });\n};\nexport const [supportedAbis, supportedAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supportedAbis',\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getSupportedAbis(),\n  syncGetter: () => RNDeviceInfo.getSupportedAbisSync(),\n  defaultValue: []\n});\nexport const [supported32BitAbis, supported32BitAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supported32BitAbis',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSupported32BitAbis(),\n  syncGetter: () => RNDeviceInfo.getSupported32BitAbisSync(),\n  defaultValue: []\n});\nexport const [supported64BitAbis, supported64BitAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supported64BitAbis',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSupported64BitAbis(),\n  syncGetter: () => RNDeviceInfo.getSupported64BitAbisSync(),\n  defaultValue: []\n});\nexport async function hasSystemFeature(feature) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeature(feature);\n  }\n\n  return false;\n}\nexport function hasSystemFeatureSync(feature) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeatureSync(feature);\n  }\n\n  return false;\n}\nexport const [getSystemAvailableFeatures, getSystemAvailableFeaturesSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSystemAvailableFeatures(),\n  syncGetter: () => RNDeviceInfo.getSystemAvailableFeaturesSync(),\n  defaultValue: []\n});\nexport const [isLocationEnabled, isLocationEnabledSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'web'],\n  getter: () => RNDeviceInfo.isLocationEnabled(),\n  syncGetter: () => RNDeviceInfo.isLocationEnabledSync(),\n  defaultValue: false\n});\nexport const [isHeadphonesConnected, isHeadphonesConnectedSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.isHeadphonesConnected(),\n  syncGetter: () => RNDeviceInfo.isHeadphonesConnectedSync(),\n  defaultValue: false\n});\nexport const [getAvailableLocationProviders, getAvailableLocationProvidersSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getAvailableLocationProviders(),\n  syncGetter: () => RNDeviceInfo.getAvailableLocationProvidersSync(),\n  defaultValue: {}\n});\nexport async function getDeviceToken() {\n  if (Platform.OS === 'ios') {\n    return RNDeviceInfo.getDeviceToken();\n  }\n\n  return 'unknown';\n}\nconst deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\nexport function useBatteryLevel() {\n  const [batteryLevel, setBatteryLevel] = useState(null);\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue = await getBatteryLevel();\n      setBatteryLevel(initialValue);\n    };\n\n    const onChange = level => {\n      setBatteryLevel(level);\n    };\n\n    setInitialValue();\n    const subscription = deviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelDidChange', onChange);\n    return () => subscription.remove();\n  }, []);\n  return batteryLevel;\n}\nexport function useBatteryLevelIsLow() {\n  const [batteryLevelIsLow, setBatteryLevelIsLow] = useState(null);\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue = await getBatteryLevel();\n      setBatteryLevelIsLow(initialValue);\n    };\n\n    const onChange = level => {\n      setBatteryLevelIsLow(level);\n    };\n\n    setInitialValue();\n    const subscription = deviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelIsLow', onChange);\n    return () => subscription.remove();\n  }, []);\n  return batteryLevelIsLow;\n}\nexport function usePowerState() {\n  const [powerState, setPowerState] = useState({});\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue = await getPowerState();\n      setPowerState(initialValue);\n    };\n\n    const onChange = state => {\n      setPowerState(state);\n    };\n\n    setInitialValue();\n    const subscription = deviceInfoEmitter.addListener('RNDeviceInfo_powerStateDidChange', onChange);\n    return () => subscription.remove();\n  }, []);\n  return powerState;\n}\nexport function useIsHeadphonesConnected() {\n  return useOnEvent('RNDeviceInfo_headphoneConnectionDidChange', isHeadphonesConnected, false);\n}\nexport function useFirstInstallTime() {\n  return useOnMount(getFirstInstallTime, -1);\n}\nexport function useDeviceName() {\n  return useOnMount(getDeviceName, 'unknown');\n}\nexport function useHasSystemFeature(feature) {\n  const asyncGetter = useCallback(() => hasSystemFeature(feature), [feature]);\n  return useOnMount(asyncGetter, false);\n}\nexport function useIsEmulator() {\n  return useOnMount(isEmulator, false);\n}\nexport function useManufacturer() {\n  return useOnMount(getManufacturer, 'unknown');\n}\nexport { AsyncHookResult, DeviceType, LocationProviderInfo, PowerState };\nconst deviceInfoModule = {\n  getAndroidId,\n  getAndroidIdSync,\n  getApiLevel,\n  getApiLevelSync,\n  getApplicationName,\n  getAvailableLocationProviders,\n  getAvailableLocationProvidersSync,\n  getBaseOs,\n  getBaseOsSync,\n  getBatteryLevel,\n  getBatteryLevelSync,\n  getBootloader,\n  getBootloaderSync,\n  getBrand,\n  getBuildId,\n  getBuildIdSync,\n  getBuildNumber,\n  getBundleId,\n  getCarrier,\n  getCarrierSync,\n  getCodename,\n  getCodenameSync,\n  getDevice,\n  getDeviceId,\n  getDeviceName,\n  getDeviceNameSync,\n  getDeviceSync,\n  getDeviceToken,\n  getDeviceType,\n  getDisplay,\n  getDisplaySync,\n  getFingerprint,\n  getFingerprintSync,\n  getFirstInstallTime,\n  getFirstInstallTimeSync,\n  getFontScale,\n  getFontScaleSync,\n  getFreeDiskStorage,\n  getFreeDiskStorageOld,\n  getFreeDiskStorageSync,\n  getFreeDiskStorageOldSync,\n  getHardware,\n  getHardwareSync,\n  getHost,\n  getHostSync,\n  getIncremental,\n  getIncrementalSync,\n  getInstallerPackageName,\n  getInstallerPackageNameSync,\n  getInstallReferrer,\n  getInstallReferrerSync,\n  getInstanceId,\n  getInstanceIdSync,\n  getIpAddress,\n  getIpAddressSync,\n  getLastUpdateTime,\n  getLastUpdateTimeSync,\n  getMacAddress,\n  getMacAddressSync,\n  getManufacturer,\n  getManufacturerSync,\n  getMaxMemory,\n  getMaxMemorySync,\n  getModel,\n  getPhoneNumber,\n  getPhoneNumberSync,\n  getPowerState,\n  getPowerStateSync,\n  getPreviewSdkInt,\n  getPreviewSdkIntSync,\n  getProduct,\n  getProductSync,\n  getReadableVersion,\n  getSecurityPatch,\n  getSecurityPatchSync,\n  getSerialNumber,\n  getSerialNumberSync,\n  getSystemAvailableFeatures,\n  getSystemAvailableFeaturesSync,\n  getSystemName,\n  getSystemVersion,\n  getTags,\n  getTagsSync,\n  getTotalDiskCapacity,\n  getTotalDiskCapacityOld,\n  getTotalDiskCapacitySync,\n  getTotalDiskCapacityOldSync,\n  getTotalMemory,\n  getTotalMemorySync,\n  getType,\n  getTypeSync,\n  getUniqueId,\n  getUsedMemory,\n  getUsedMemorySync,\n  getUserAgent,\n  getUserAgentSync,\n  getVersion,\n  hasGms,\n  hasGmsSync,\n  hasHms,\n  hasHmsSync,\n  hasNotch,\n  hasSystemFeature,\n  hasSystemFeatureSync,\n  isAirplaneMode,\n  isAirplaneModeSync,\n  isBatteryCharging,\n  isBatteryChargingSync,\n  isCameraPresent,\n  isCameraPresentSync,\n  isEmulator,\n  isEmulatorSync,\n  isHeadphonesConnected,\n  isHeadphonesConnectedSync,\n  isLandscape,\n  isLandscapeSync,\n  isLocationEnabled,\n  isLocationEnabledSync,\n  isPinOrFingerprintSet,\n  isPinOrFingerprintSetSync,\n  isTablet,\n  supported32BitAbis,\n  supported32BitAbisSync,\n  supported64BitAbis,\n  supported64BitAbisSync,\n  supportedAbis,\n  supportedAbisSync,\n  syncUniqueId,\n  useBatteryLevel,\n  useBatteryLevelIsLow,\n  useDeviceName,\n  useFirstInstallTime,\n  useHasSystemFeature,\n  useIsEmulator,\n  usePowerState,\n  useManufacturer,\n  useIsHeadphonesConnected\n};\nexport default deviceInfoModule;","map":{"version":3,"sources":["index.ts"],"names":["getUniqueId","getSupportedPlatformInfoSync","defaultValue","memoKey","supportedPlatforms","getter","RNDeviceInfo","uniqueId","Platform","getSupportedPlatformInfoFunctions","syncGetter","getDeviceId","Promise","getModel","model","getBrand","brand","getSystemName","ios","android","windows","default","getSystemVersion","getBundleId","bundleId","getApplicationName","getBuildNumber","getVersion","appVersion","getUserAgent","getSupportedPlatformInfoAsync","getUserAgentSync","isTablet","notch","_brand","_model","devicesWithNotch","item","getTotalDiskCapacity","getTotalDiskCapacitySync","getFreeDiskStorage","getFreeDiskStorageSync","isLandscapeSync","width","Dimensions","getDeviceType","deviceType","getDeviceTypeSync","deviceInfoEmitter","NativeModules","useState","useEffect","setInitialValue","initialValue","getBatteryLevel","setBatteryLevel","onChange","level","subscription","setBatteryLevelIsLow","getPowerState","setPowerState","state","useOnEvent","useOnMount","asyncGetter","useCallback","hasSystemFeature","deviceInfoModule","useIsHeadphonesConnected"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { Dimensions, NativeEventEmitter, NativeModules, Platform } from 'react-native';\nimport { useOnEvent, useOnMount } from './internal/asyncHookWrappers';\nimport devicesWithNotch from './internal/devicesWithNotch';\nimport RNDeviceInfo from './internal/nativeInterface';\nimport {\n  getSupportedPlatformInfoFunctions,\n  getSupportedPlatformInfoSync,\n  getSupportedPlatformInfoAsync,\n} from './internal/supported-platform-info';\nimport { DeviceInfoModule } from './internal/privateTypes';\nimport { AsyncHookResult, DeviceType, LocationProviderInfo, PowerState } from './internal/types';\n\nexport const getUniqueId = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    memoKey: 'uniqueId',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: () => RNDeviceInfo.uniqueId,\n  });\n\nlet uniqueId: string;\nexport async function syncUniqueId() {\n  if (Platform.OS === 'ios') {\n    uniqueId = await RNDeviceInfo.syncUniqueId();\n  } else {\n    uniqueId = getUniqueId();\n  }\n  return uniqueId;\n}\n\nexport const [getInstanceId, getInstanceIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'instanceId',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getInstanceId(),\n  syncGetter: () => RNDeviceInfo.getInstanceIdSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getSerialNumber, getSerialNumberSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'serialNumber',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSerialNumber(),\n  syncGetter: () => RNDeviceInfo.getSerialNumberSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getAndroidId, getAndroidIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'androidId',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getAndroidId(),\n  syncGetter: () => RNDeviceInfo.getAndroidIdSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getIpAddress, getIpAddressSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getIpAddress(),\n  syncGetter: () => RNDeviceInfo.getIpAddressSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [isCameraPresent, isCameraPresentSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.isCameraPresent(),\n  syncGetter: () => RNDeviceInfo.isCameraPresentSync(),\n  defaultValue: false,\n});\n\nexport async function getMacAddress() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddress();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n  return 'unknown';\n}\n\nexport function getMacAddressSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddressSync();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n  return 'unknown';\n}\n\nexport const getDeviceId = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    memoKey: 'deviceId',\n    getter: () => RNDeviceInfo.deviceId,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n  });\n\nexport const [getManufacturer, getManufacturerSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'manufacturer',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () =>\n    Platform.OS == 'ios' ? Promise.resolve('Apple') : RNDeviceInfo.getSystemManufacturer(),\n  syncGetter: () => (Platform.OS == 'ios' ? 'Apple' : RNDeviceInfo.getSystemManufacturerSync()),\n  defaultValue: 'unknown',\n});\n\nexport const getModel = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'model',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['ios', 'android', 'windows'],\n    getter: () => RNDeviceInfo.model,\n  });\n\nexport const getBrand = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'brand',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.brand,\n  });\n\nexport const getSystemName = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    supportedPlatforms: ['ios', 'android', 'windows'],\n    memoKey: 'systemName',\n    getter: () =>\n      Platform.select({\n        ios: RNDeviceInfo.systemName,\n        android: 'Android',\n        windows: 'Windows',\n        default: 'unknown',\n      }),\n  });\n\nexport const getSystemVersion = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.systemVersion,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    memoKey: 'systemVersion',\n  });\n\nexport const [getBuildId, getBuildIdSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'buildId',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getBuildId(),\n  syncGetter: () => RNDeviceInfo.getBuildIdSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getApiLevel, getApiLevelSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'apiLevel',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getApiLevel(),\n  syncGetter: () => RNDeviceInfo.getApiLevelSync(),\n  defaultValue: -1,\n});\n\nexport const getBundleId = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'bundleId',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.bundleId,\n  });\n\nexport const [\n  getInstallerPackageName,\n  getInstallerPackageNameSync,\n] = getSupportedPlatformInfoFunctions({\n  memoKey: 'installerPackageName',\n  supportedPlatforms: ['android', 'windows'],\n  getter: () => RNDeviceInfo.getInstallerPackageName(),\n  syncGetter: () => RNDeviceInfo.getInstallerPackageNameSync(),\n  defaultValue: 'unknown',\n});\n\nexport const getApplicationName = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'appName',\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.appName,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n  });\n\nexport const getBuildNumber = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'buildNumber',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: () => RNDeviceInfo.buildNumber,\n    defaultValue: 'unknown',\n  });\n\nexport const getVersion = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'version',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: () => RNDeviceInfo.appVersion,\n  });\n\nexport function getReadableVersion() {\n  return getVersion() + '.' + getBuildNumber();\n}\n\nexport const [getDeviceName, getDeviceNameSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'deviceName',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getDeviceName(),\n  syncGetter: () => RNDeviceInfo.getDeviceNameSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getUsedMemory, getUsedMemorySync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getUsedMemory(),\n  syncGetter: () => RNDeviceInfo.getUsedMemorySync(),\n  defaultValue: -1,\n});\n\nexport const getUserAgent = () =>\n  getSupportedPlatformInfoAsync({\n    memoKey: 'userAgent',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['android', 'ios', 'web'],\n    getter: () => RNDeviceInfo.getUserAgent(),\n  });\n\nexport const getUserAgentSync = () =>\n  getSupportedPlatformInfoSync({\n    memoKey: 'userAgent',\n    defaultValue: 'unknown',\n    supportedPlatforms: ['android', 'web'],\n    getter: () => RNDeviceInfo.getUserAgentSync(),\n  });\n\nexport const [getFontScale, getFontScaleSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.getFontScale(),\n  syncGetter: () => RNDeviceInfo.getFontScaleSync(),\n  defaultValue: -1,\n});\n\nexport const [getBootloader, getBootloaderSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'bootloader',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getBootloader(),\n  syncGetter: () => RNDeviceInfo.getBootloaderSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getDevice, getDeviceSync] = getSupportedPlatformInfoFunctions({\n  getter: () => RNDeviceInfo.getDevice(),\n  syncGetter: () => RNDeviceInfo.getDeviceSync(),\n  defaultValue: 'unknown',\n  memoKey: 'device',\n  supportedPlatforms: ['android'],\n});\n\nexport const [getDisplay, getDisplaySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'display',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getDisplay(),\n  syncGetter: () => RNDeviceInfo.getDisplaySync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getFingerprint, getFingerprintSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'fingerprint',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getFingerprint(),\n  syncGetter: () => RNDeviceInfo.getFingerprintSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getHardware, getHardwareSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'hardware',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getHardware(),\n  syncGetter: () => RNDeviceInfo.getHardwareSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getHost, getHostSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'host',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getHost(),\n  syncGetter: () => RNDeviceInfo.getHostSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getProduct, getProductSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'product',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getProduct(),\n  syncGetter: () => RNDeviceInfo.getProductSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getTags, getTagsSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'tags',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getTags(),\n  syncGetter: () => RNDeviceInfo.getTagsSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getType, getTypeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'type',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getType(),\n  syncGetter: () => RNDeviceInfo.getTypeSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getBaseOs, getBaseOsSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'baseOs',\n  supportedPlatforms: ['android', 'web', 'windows'],\n  getter: () => RNDeviceInfo.getBaseOs(),\n  syncGetter: () => RNDeviceInfo.getBaseOsSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getPreviewSdkInt, getPreviewSdkIntSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'previewSdkInt',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getPreviewSdkInt(),\n  syncGetter: () => RNDeviceInfo.getPreviewSdkIntSync(),\n  defaultValue: -1,\n});\n\nexport const [getSecurityPatch, getSecurityPatchSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'securityPatch',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSecurityPatch(),\n  syncGetter: () => RNDeviceInfo.getSecurityPatchSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getCodename, getCodenameSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'codeName',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getCodename(),\n  syncGetter: () => RNDeviceInfo.getCodenameSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getIncremental, getIncrementalSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'incremental',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getIncremental(),\n  syncGetter: () => RNDeviceInfo.getIncrementalSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [isEmulator, isEmulatorSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'emulator',\n  supportedPlatforms: ['android', 'ios', 'windows'],\n  getter: () => RNDeviceInfo.isEmulator(),\n  syncGetter: () => RNDeviceInfo.isEmulatorSync(),\n  defaultValue: false,\n});\n\nexport const isTablet = () =>\n  getSupportedPlatformInfoSync({\n    defaultValue: false,\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    memoKey: 'tablet',\n    getter: () => RNDeviceInfo.isTablet,\n  });\n\nexport const [isPinOrFingerprintSet, isPinOrFingerprintSetSync] = getSupportedPlatformInfoFunctions(\n  {\n    supportedPlatforms: ['android', 'ios', 'windows'],\n    getter: () => RNDeviceInfo.isPinOrFingerprintSet(),\n    syncGetter: () => RNDeviceInfo.isPinOrFingerprintSetSync(),\n    defaultValue: false,\n  }\n);\n\nlet notch: boolean;\nexport function hasNotch() {\n  if (notch === undefined) {\n    let _brand = getBrand();\n    let _model = getModel();\n    notch =\n      devicesWithNotch.findIndex(\n        (item) =>\n          item.brand.toLowerCase() === _brand.toLowerCase() &&\n          item.model.toLowerCase() === _model.toLowerCase()\n      ) !== -1;\n  }\n  return notch;\n}\n\nexport const [hasGms, hasGmsSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.hasGms(),\n  syncGetter: () => RNDeviceInfo.hasGmsSync(),\n  defaultValue: false,\n});\n\nexport const [hasHms, hasHmsSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.hasHms(),\n  syncGetter: () => RNDeviceInfo.hasHmsSync(),\n  defaultValue: false,\n});\n\nexport const [getFirstInstallTime, getFirstInstallTimeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'firstInstallTime',\n  supportedPlatforms: ['android', 'windows'],\n  getter: () => RNDeviceInfo.getFirstInstallTime(),\n  syncGetter: () => RNDeviceInfo.getFirstInstallTimeSync(),\n  defaultValue: -1,\n});\n\nexport const [getInstallReferrer, getInstallReferrerSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'installReferrer',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getInstallReferrer(),\n  syncGetter: () => RNDeviceInfo.getInstallReferrerSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getLastUpdateTime, getLastUpdateTimeSync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'lastUpdateTime',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getLastUpdateTime(),\n  syncGetter: () => RNDeviceInfo.getLastUpdateTimeSync(),\n  defaultValue: -1,\n});\n\nexport const [getPhoneNumber, getPhoneNumberSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getPhoneNumber(),\n  syncGetter: () => RNDeviceInfo.getPhoneNumberSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getCarrier, getCarrierSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getCarrier(),\n  syncGetter: () => RNDeviceInfo.getCarrierSync(),\n  defaultValue: 'unknown',\n});\n\nexport const [getTotalMemory, getTotalMemorySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'totalMemory',\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getTotalMemory(),\n  syncGetter: () => RNDeviceInfo.getTotalMemorySync(),\n  defaultValue: -1,\n});\n\nexport const [getMaxMemory, getMaxMemorySync] = getSupportedPlatformInfoFunctions({\n  memoKey: 'maxMemory',\n  supportedPlatforms: ['android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getMaxMemory(),\n  syncGetter: () => RNDeviceInfo.getMaxMemorySync(),\n  defaultValue: -1,\n});\n\nexport const [getTotalDiskCapacity, getTotalDiskCapacitySync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getTotalDiskCapacity(),\n  syncGetter: () => RNDeviceInfo.getTotalDiskCapacitySync(),\n  defaultValue: -1,\n});\n\nexport async function getTotalDiskCapacityOld() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getTotalDiskCapacityOld();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getTotalDiskCapacity();\n  }\n\n  return -1;\n}\n\nexport function getTotalDiskCapacityOldSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getTotalDiskCapacityOldSync();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getTotalDiskCapacitySync();\n  }\n\n  return -1;\n}\n\nexport const [getFreeDiskStorage, getFreeDiskStorageSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getFreeDiskStorage(),\n  syncGetter: () => RNDeviceInfo.getFreeDiskStorageSync(),\n  defaultValue: -1,\n});\n\nexport async function getFreeDiskStorageOld() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getFreeDiskStorageOld();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getFreeDiskStorage();\n  }\n\n  return -1;\n}\n\nexport function getFreeDiskStorageOldSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getFreeDiskStorageOldSync();\n  }\n  if (Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return getFreeDiskStorageSync();\n  }\n\n  return -1;\n}\n\nexport const [getBatteryLevel, getBatteryLevelSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getBatteryLevel(),\n  syncGetter: () => RNDeviceInfo.getBatteryLevelSync(),\n  defaultValue: -1,\n});\n\nexport const [getPowerState, getPowerStateSync] = getSupportedPlatformInfoFunctions<\n  PowerState | {}\n>({\n  supportedPlatforms: ['ios', 'android', 'windows', 'web'],\n  getter: () => RNDeviceInfo.getPowerState(),\n  syncGetter: () => RNDeviceInfo.getPowerStateSync(),\n  defaultValue: {},\n});\n\nexport const [isBatteryCharging, isBatteryChargingSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'windows', 'web'],\n  getter: () => RNDeviceInfo.isBatteryCharging(),\n  syncGetter: () => RNDeviceInfo.isBatteryChargingSync(),\n  defaultValue: false,\n});\n\nexport async function isLandscape() {\n  return Promise.resolve(isLandscapeSync());\n}\n\nexport function isLandscapeSync() {\n  const { height, width } = Dimensions.get('window');\n  return width >= height;\n}\n\nexport const [isAirplaneMode, isAirplaneModeSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'web'],\n  getter: () => RNDeviceInfo.isAirplaneMode(),\n  syncGetter: () => RNDeviceInfo.isAirplaneModeSync(),\n  defaultValue: false,\n});\n\nexport const getDeviceType = () => {\n  if (Platform.OS === 'windows') return 'Desktop';\n\n  return getSupportedPlatformInfoSync({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.deviceType,\n  });\n};\n\nexport const getDeviceTypeSync = () => {\n  if (Platform.OS === 'windows') return 'Desktop';\n\n  return getSupportedPlatformInfoSync({\n    memoKey: 'deviceType',\n    supportedPlatforms: ['android', 'ios'],\n    defaultValue: 'unknown',\n    getter: () => RNDeviceInfo.deviceType,\n  });\n};\n\nexport const [supportedAbis, supportedAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supportedAbis',\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getSupportedAbis(),\n  syncGetter: () => RNDeviceInfo.getSupportedAbisSync(),\n  defaultValue: [] as string[],\n});\n\nexport const [supported32BitAbis, supported32BitAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supported32BitAbis',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSupported32BitAbis(),\n  syncGetter: () => RNDeviceInfo.getSupported32BitAbisSync(),\n  defaultValue: [] as string[],\n});\n\nexport const [supported64BitAbis, supported64BitAbisSync] = getSupportedPlatformInfoFunctions({\n  memoKey: '_supported64BitAbis',\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSupported64BitAbis(),\n  syncGetter: () => RNDeviceInfo.getSupported64BitAbisSync(),\n  defaultValue: [],\n});\n\nexport async function hasSystemFeature(feature: string) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeature(feature);\n  }\n  return false;\n}\n\nexport function hasSystemFeatureSync(feature: string) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeatureSync(feature);\n  }\n  return false;\n}\n\nexport const [\n  getSystemAvailableFeatures,\n  getSystemAvailableFeaturesSync,\n] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android'],\n  getter: () => RNDeviceInfo.getSystemAvailableFeatures(),\n  syncGetter: () => RNDeviceInfo.getSystemAvailableFeaturesSync(),\n  defaultValue: [] as string[],\n});\n\nexport const [isLocationEnabled, isLocationEnabledSync] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios', 'web'],\n  getter: () => RNDeviceInfo.isLocationEnabled(),\n  syncGetter: () => RNDeviceInfo.isLocationEnabledSync(),\n  defaultValue: false,\n});\n\nexport const [isHeadphonesConnected, isHeadphonesConnectedSync] = getSupportedPlatformInfoFunctions(\n  {\n    supportedPlatforms: ['android', 'ios'],\n    getter: () => RNDeviceInfo.isHeadphonesConnected(),\n    syncGetter: () => RNDeviceInfo.isHeadphonesConnectedSync(),\n    defaultValue: false,\n  }\n);\n\nexport const [\n  getAvailableLocationProviders,\n  getAvailableLocationProvidersSync,\n] = getSupportedPlatformInfoFunctions({\n  supportedPlatforms: ['android', 'ios'],\n  getter: () => RNDeviceInfo.getAvailableLocationProviders(),\n  syncGetter: () => RNDeviceInfo.getAvailableLocationProvidersSync(),\n  defaultValue: {},\n});\n\nexport async function getDeviceToken() {\n  if (Platform.OS === 'ios') {\n    return RNDeviceInfo.getDeviceToken();\n  }\n  return 'unknown';\n}\n\nconst deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\nexport function useBatteryLevel(): number | null {\n  const [batteryLevel, setBatteryLevel] = useState<number | null>(null);\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: number = await getBatteryLevel();\n      setBatteryLevel(initialValue);\n    };\n\n    const onChange = (level: number) => {\n      setBatteryLevel(level);\n    };\n\n    setInitialValue();\n\n    const subscription = deviceInfoEmitter.addListener(\n      'RNDeviceInfo_batteryLevelDidChange',\n      onChange\n    );\n\n    return () => subscription.remove();\n  }, []);\n\n  return batteryLevel;\n}\n\nexport function useBatteryLevelIsLow(): number | null {\n  const [batteryLevelIsLow, setBatteryLevelIsLow] = useState<number | null>(null);\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: number = await getBatteryLevel();\n      setBatteryLevelIsLow(initialValue);\n    };\n\n    const onChange = (level: number) => {\n      setBatteryLevelIsLow(level);\n    };\n\n    setInitialValue();\n\n    const subscription = deviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelIsLow', onChange);\n\n    return () => subscription.remove();\n  }, []);\n\n  return batteryLevelIsLow;\n}\n\nexport function usePowerState(): PowerState | {} {\n  const [powerState, setPowerState] = useState<PowerState | {}>({});\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: PowerState | {} = await getPowerState();\n      setPowerState(initialValue);\n    };\n\n    const onChange = (state: PowerState) => {\n      setPowerState(state);\n    };\n\n    setInitialValue();\n\n    const subscription = deviceInfoEmitter.addListener(\n      'RNDeviceInfo_powerStateDidChange',\n      onChange\n    );\n\n    return () => subscription.remove();\n  }, []);\n\n  return powerState;\n}\n\nexport function useIsHeadphonesConnected(): AsyncHookResult<boolean> {\n  return useOnEvent('RNDeviceInfo_headphoneConnectionDidChange', isHeadphonesConnected, false);\n}\n\nexport function useFirstInstallTime(): AsyncHookResult<number> {\n  return useOnMount(getFirstInstallTime, -1);\n}\n\nexport function useDeviceName(): AsyncHookResult<string> {\n  return useOnMount(getDeviceName, 'unknown');\n}\n\nexport function useHasSystemFeature(feature: string): AsyncHookResult<boolean> {\n  const asyncGetter = useCallback(() => hasSystemFeature(feature), [feature]);\n  return useOnMount(asyncGetter, false);\n}\n\nexport function useIsEmulator(): AsyncHookResult<boolean> {\n  return useOnMount(isEmulator, false);\n}\n\nexport function useManufacturer(): AsyncHookResult<string> {\n  return useOnMount(getManufacturer, 'unknown');\n}\n\nexport { AsyncHookResult, DeviceType, LocationProviderInfo, PowerState };\n\nconst deviceInfoModule: DeviceInfoModule = {\n  getAndroidId,\n  getAndroidIdSync,\n  getApiLevel,\n  getApiLevelSync,\n  getApplicationName,\n  getAvailableLocationProviders,\n  getAvailableLocationProvidersSync,\n  getBaseOs,\n  getBaseOsSync,\n  getBatteryLevel,\n  getBatteryLevelSync,\n  getBootloader,\n  getBootloaderSync,\n  getBrand,\n  getBuildId,\n  getBuildIdSync,\n  getBuildNumber,\n  getBundleId,\n  getCarrier,\n  getCarrierSync,\n  getCodename,\n  getCodenameSync,\n  getDevice,\n  getDeviceId,\n  getDeviceName,\n  getDeviceNameSync,\n  getDeviceSync,\n  getDeviceToken,\n  getDeviceType,\n  getDisplay,\n  getDisplaySync,\n  getFingerprint,\n  getFingerprintSync,\n  getFirstInstallTime,\n  getFirstInstallTimeSync,\n  getFontScale,\n  getFontScaleSync,\n  getFreeDiskStorage,\n  getFreeDiskStorageOld,\n  getFreeDiskStorageSync,\n  getFreeDiskStorageOldSync,\n  getHardware,\n  getHardwareSync,\n  getHost,\n  getHostSync,\n  getIncremental,\n  getIncrementalSync,\n  getInstallerPackageName,\n  getInstallerPackageNameSync,\n  getInstallReferrer,\n  getInstallReferrerSync,\n  getInstanceId,\n  getInstanceIdSync,\n  getIpAddress,\n  getIpAddressSync,\n  getLastUpdateTime,\n  getLastUpdateTimeSync,\n  getMacAddress,\n  getMacAddressSync,\n  getManufacturer,\n  getManufacturerSync,\n  getMaxMemory,\n  getMaxMemorySync,\n  getModel,\n  getPhoneNumber,\n  getPhoneNumberSync,\n  getPowerState,\n  getPowerStateSync,\n  getPreviewSdkInt,\n  getPreviewSdkIntSync,\n  getProduct,\n  getProductSync,\n  getReadableVersion,\n  getSecurityPatch,\n  getSecurityPatchSync,\n  getSerialNumber,\n  getSerialNumberSync,\n  getSystemAvailableFeatures,\n  getSystemAvailableFeaturesSync,\n  getSystemName,\n  getSystemVersion,\n  getTags,\n  getTagsSync,\n  getTotalDiskCapacity,\n  getTotalDiskCapacityOld,\n  getTotalDiskCapacitySync,\n  getTotalDiskCapacityOldSync,\n  getTotalMemory,\n  getTotalMemorySync,\n  getType,\n  getTypeSync,\n  getUniqueId,\n  getUsedMemory,\n  getUsedMemorySync,\n  getUserAgent,\n  getUserAgentSync,\n  getVersion,\n  hasGms,\n  hasGmsSync,\n  hasHms,\n  hasHmsSync,\n  hasNotch,\n  hasSystemFeature,\n  hasSystemFeatureSync,\n  isAirplaneMode,\n  isAirplaneModeSync,\n  isBatteryCharging,\n  isBatteryChargingSync,\n  isCameraPresent,\n  isCameraPresentSync,\n  isEmulator,\n  isEmulatorSync,\n  isHeadphonesConnected,\n  isHeadphonesConnectedSync,\n  isLandscape,\n  isLandscapeSync,\n  isLocationEnabled,\n  isLocationEnabledSync,\n  isPinOrFingerprintSet,\n  isPinOrFingerprintSetSync,\n  isTablet,\n  supported32BitAbis,\n  supported32BitAbisSync,\n  supported64BitAbis,\n  supported64BitAbisSync,\n  supportedAbis,\n  supportedAbisSync,\n  syncUniqueId,\n  useBatteryLevel,\n  useBatteryLevelIsLow,\n  useDeviceName,\n  useFirstInstallTime,\n  useHasSystemFeature,\n  useIsEmulator,\n  usePowerState,\n  useManufacturer,\n  useIsHeadphonesConnected,\n};\n\nexport default deviceInfoModule;\n"]},"metadata":{},"sourceType":"module"}