{"ast":null,"code":"/*\n * ntp-client\n * https://github.com/moonpyk/node-ntp-client\n *\n * Copyright (c) 2013 Clément Bourgeois\n * Licensed under the MIT license.\n */\n(function (exports) {\n  \"use strict\";\n\n  var dgram = require('dgram');\n\n  var Buffer = require('buffer').Buffer;\n\n  exports.defaultNtpPort = 123;\n  exports.defaultNtpServer = \"pool.ntp.org\";\n  /**\n   * Amount of acceptable time to await for a response from the remote server.\n   * Configured default to 10 seconds.\n   */\n\n  exports.ntpReplyTimeout = 10000;\n  /**\n   * Fetches the current NTP Time from the given server and port.\n   * @param {string} server IP/Hostname of the remote NTP Server\n   * @param {number} port Remote NTP Server port number\n   * @param {function(Object, Date)} callback(err, date) Async callback for\n   * the result date or eventually error.\n   */\n\n  exports.getNetworkTime = function (server, port, callback) {\n    if (callback === null || typeof callback !== \"function\") {\n      return;\n    }\n\n    server = server || exports.defaultNtpServer;\n    port = port || exports.defaultNtpPort;\n    var client = dgram.createSocket(\"udp4\"),\n        ntpData = new Buffer(48); // RFC 2030 -> LI = 0 (no warning, 2 bits), VN = 3 (IPv4 only, 3 bits), Mode = 3 (Client Mode, 3 bits) -> 1 byte\n    // -> rtol(LI, 6) ^ rotl(VN, 3) ^ rotl(Mode, 0)\n    // -> = 0x00 ^ 0x18 ^ 0x03\n\n    ntpData[0] = 0x1B;\n\n    for (var i = 1; i < 48; i++) {\n      ntpData[i] = 0;\n    }\n\n    var timeout = setTimeout(function () {\n      client.close();\n      callback(\"Timeout waiting for NTP response.\", null);\n    }, exports.ntpReplyTimeout); // Some errors can happen before/after send() or cause send() to was impossible.\n    // Some errors will also be given to the send() callback.\n    // We keep a flag, therefore, to prevent multiple callbacks.\n    // NOTE : the error callback is not generalised, as the client has to lose the connection also, apparently.\n\n    var errorFired = false;\n    client.on('error', function (err) {\n      if (errorFired) {\n        return;\n      }\n\n      callback(err, null);\n      errorFired = true;\n      clearTimeout(timeout);\n    });\n    client.send(ntpData, 0, ntpData.length, port, server, function (err) {\n      if (err) {\n        if (errorFired) {\n          return;\n        }\n\n        clearTimeout(timeout);\n        callback(err, null);\n        errorFired = true;\n        client.close();\n        return;\n      }\n\n      client.once('message', function (msg) {\n        clearTimeout(timeout);\n        client.close(); // Offset to get to the \"Transmit Timestamp\" field (time at which the reply\n        // departed the server for the client, in 64-bit timestamp format.\"\n\n        var offsetTransmitTime = 40,\n            intpart = 0,\n            fractpart = 0; // Get the seconds part\n\n        for (var i = 0; i <= 3; i++) {\n          intpart = 256 * intpart + msg[offsetTransmitTime + i];\n        } // Get the seconds fraction\n\n\n        for (i = 4; i <= 7; i++) {\n          fractpart = 256 * fractpart + msg[offsetTransmitTime + i];\n        }\n\n        var milliseconds = intpart * 1000 + fractpart * 1000 / 0x100000000;\n        var startUTCMilliseconds = Date.UTC(1900, 0, 1); // Jan 01 1900 – initial NTP date\n\n        var date = new Date(startUTCMilliseconds);\n        date.setUTCMilliseconds(date.getUTCMilliseconds() + milliseconds);\n        callback(null, date);\n      });\n    });\n  };\n\n  exports.demo = function (argv) {\n    exports.getNetworkTime(exports.defaultNtpServer, exports.defaultNtpPort, function (err, date) {\n      if (err) {\n        console.error(err);\n        return;\n      }\n\n      console.log(date);\n    });\n  };\n})(exports);","map":{"version":3,"sources":["/home/main/Documents/dino-ranch-landing/node_modules/react-native-ntp-client/lib/ntp-client.js"],"names":["exports","dgram","require","Buffer","defaultNtpPort","defaultNtpServer","ntpReplyTimeout","getNetworkTime","server","port","callback","client","createSocket","ntpData","i","timeout","setTimeout","close","errorFired","on","err","clearTimeout","send","length","once","msg","offsetTransmitTime","intpart","fractpart","milliseconds","startUTCMilliseconds","Date","UTC","date","setUTCMilliseconds","getUTCMilliseconds","demo","argv","console","error","log"],"mappings":"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","sourcesContent":["/*\n * ntp-client\n * https://github.com/moonpyk/node-ntp-client\n *\n * Copyright (c) 2013 Clément Bourgeois\n * Licensed under the MIT license.\n */\n\n(function (exports) {\n    \"use strict\";\n\n    var dgram = require('dgram');\n    var Buffer = require('buffer').Buffer;\n\n    exports.defaultNtpPort = 123;\n    exports.defaultNtpServer = \"pool.ntp.org\";\n\n    /**\n     * Amount of acceptable time to await for a response from the remote server.\n     * Configured default to 10 seconds.\n     */\n    exports.ntpReplyTimeout = 10000;\n\n    /**\n     * Fetches the current NTP Time from the given server and port.\n     * @param {string} server IP/Hostname of the remote NTP Server\n     * @param {number} port Remote NTP Server port number\n     * @param {function(Object, Date)} callback(err, date) Async callback for\n     * the result date or eventually error.\n     */\n    exports.getNetworkTime = function (server, port, callback) {\n        if (callback === null || typeof callback !== \"function\") {\n            return;\n        }\n\n        server = server || exports.defaultNtpServer;\n        port = port || exports.defaultNtpPort;\n\n        var client = dgram.createSocket(\"udp4\"),\n            ntpData = new Buffer(48);\n\n        // RFC 2030 -> LI = 0 (no warning, 2 bits), VN = 3 (IPv4 only, 3 bits), Mode = 3 (Client Mode, 3 bits) -> 1 byte\n        // -> rtol(LI, 6) ^ rotl(VN, 3) ^ rotl(Mode, 0)\n        // -> = 0x00 ^ 0x18 ^ 0x03\n        ntpData[0] = 0x1B;\n\n        for (var i = 1; i < 48; i++) {\n            ntpData[i] = 0;\n        }\n\n        var timeout = setTimeout(function () {\n            client.close();\n            callback(\"Timeout waiting for NTP response.\", null);\n        }, exports.ntpReplyTimeout);\n\n        // Some errors can happen before/after send() or cause send() to was impossible.\n        // Some errors will also be given to the send() callback.\n        // We keep a flag, therefore, to prevent multiple callbacks.\n        // NOTE : the error callback is not generalised, as the client has to lose the connection also, apparently.\n        var errorFired = false;\n\n        client.on('error', function (err) {\n            if (errorFired) {\n                return;\n            }\n\n            callback(err, null);\n            errorFired = true;\n\n            clearTimeout(timeout);\n        });\n\n        client.send(ntpData, 0, ntpData.length, port, server, function (err) {\n            if (err) {\n                if (errorFired) {\n                    return;\n                }\n                clearTimeout(timeout);\n                callback(err, null);\n                errorFired = true;\n                client.close();\n                return;\n            }\n\n            client.once('message', function (msg) {\n                clearTimeout(timeout);\n                client.close();\n\n                // Offset to get to the \"Transmit Timestamp\" field (time at which the reply\n                // departed the server for the client, in 64-bit timestamp format.\"\n                var offsetTransmitTime = 40,\n                    intpart = 0,\n                    fractpart = 0;\n\n                // Get the seconds part\n                for (var i = 0; i <= 3; i++) {\n                    intpart = 256 * intpart + msg[offsetTransmitTime + i];\n                }\n\n                // Get the seconds fraction\n                for (i = 4; i <= 7; i++) {\n                    fractpart = 256 * fractpart + msg[offsetTransmitTime + i];\n                }\n\n                var milliseconds = (intpart * 1000 + (fractpart * 1000) / 0x100000000);\n\n                var startUTCMilliseconds = Date.UTC(1900, 0, 1); // Jan 01 1900 – initial NTP date\n                var date = new Date(startUTCMilliseconds);\n                date.setUTCMilliseconds(date.getUTCMilliseconds() + milliseconds);\n\n                callback(null, date);\n            });\n        });\n    };\n\n    exports.demo = function (argv) {\n        exports.getNetworkTime(\n            exports.defaultNtpServer,\n            exports.defaultNtpPort,\n            function (err, date) {\n                if (err) {\n                    console.error(err);\n                    return;\n                }\n\n                console.log(date);\n            });\n    };\n}(exports));\n"]},"metadata":{},"sourceType":"script"}