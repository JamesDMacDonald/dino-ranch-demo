{"ast":null,"code":"import { Platform } from 'react-native'; // centralized memo object\n\nlet memo = {};\nexport function clearMemo() {\n  memo = {};\n}\n/**\n * function returns the proper getter based current platform X supported platforms\n * @param supportedPlatforms array of supported platforms (OS)\n * @param getter desired function used to get info\n * @param defaultGetter getter that returns a default value if desired getter is not supported by current platform\n */\n\nfunction getSupportedFunction(supportedPlatforms, getter, defaultGetter) {\n  let supportedMap = {};\n  supportedPlatforms.filter(key => Platform.OS == key).forEach(key => supportedMap[key] = getter);\n  return Platform.select({ ...supportedMap,\n    default: defaultGetter\n  });\n}\n/**\n * function used to get desired info synchronously — with optional memoization\n * @param param0\n */\n\n\nexport function getSupportedPlatformInfoSync({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey\n}) {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = getSupportedFunction(supportedPlatforms, getter, () => defaultValue)();\n\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n\n    return output;\n  }\n}\n/**\n * function used to get desired info asynchronously — with optional memoization\n * @param param0\n */\n\nexport async function getSupportedPlatformInfoAsync({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey\n}) {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = await getSupportedFunction(supportedPlatforms, getter, () => Promise.resolve(defaultValue))();\n\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n\n    return output;\n  }\n}\n/**\n * function that returns array of getter functions [async, sync]\n * @param param0\n */\n\nexport function getSupportedPlatformInfoFunctions({\n  syncGetter,\n  ...asyncParams\n}) {\n  return [() => getSupportedPlatformInfoAsync(asyncParams), () => getSupportedPlatformInfoSync({ ...asyncParams,\n    getter: syncGetter\n  })];\n}","map":{"version":3,"sources":["supported-platform-info.ts"],"names":["memo","supportedMap","supportedPlatforms","key","Platform","default","defaultGetter","memoKey","output","getSupportedFunction","Promise","asyncParams","getSupportedPlatformInfoAsync","getSupportedPlatformInfoSync","getter","syncGetter"],"mappings":"AAAA,SAAA,QAAA,QAAA,cAAA,C,CAWA;;AACA,IAAIA,IAAc,GAAlB,EAAA;AAEA,OAAO,SAAA,SAAA,GAAqB;AAC1BA,EAAAA,IAAI,GAAJA,EAAAA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,SAAA,oBAAA,CAAA,kBAAA,EAAA,MAAA,EAAA,aAAA,EAIa;AACX,MAAIC,YAAiB,GAArB,EAAA;AACAC,EAAAA,kBAAkB,CAAlBA,MAAAA,CACWC,GAAD,IAASC,QAAQ,CAARA,EAAAA,IADnBF,GAAAA,EAAAA,OAAAA,CAEYC,GAAD,IAAUF,YAAY,CAAZA,GAAY,CAAZA,GAFrBC,MAAAA;AAGA,SAAO,QAAQ,CAAR,MAAA,CAAgB,EACrB,GADqB,YAAA;AAErBG,IAAAA,OAAO,EAAEC;AAFY,GAAhB,CAAP;AAID;AAED;AACA;AACA;AACA;;;AACA,OAAO,SAAA,4BAAA,CAAyC;AAAA,EAAA,MAAA;AAAA,EAAA,kBAAA;AAAA,EAAA,YAAA;AAI9CC,EAAAA;AAJ8C,CAAzC,EAKsC;AAC3C,MAAIA,OAAO,IAAIP,IAAI,CAAJA,OAAI,CAAJA,IAAf,SAAA,EAA2C;AACzC,WAAOA,IAAI,CAAX,OAAW,CAAX;AADF,GAAA,MAEO;AACL,UAAMQ,MAAM,GAAGC,oBAAoB,CAAA,kBAAA,EAAA,MAAA,EAA6B,MAAhE,YAAmC,CAApBA,EAAf;;AACA,QAAA,OAAA,EAAa;AACXT,MAAAA,IAAI,CAAJA,OAAI,CAAJA,GAAAA,MAAAA;AACD;;AACD,WAAA,MAAA;AACD;AACF;AAED;AACA;AACA;AACA;;AACA,OAAO,eAAA,6BAAA,CAAgD;AAAA,EAAA,MAAA;AAAA,EAAA,kBAAA;AAAA,EAAA,YAAA;AAIrDO,EAAAA;AAJqD,CAAhD,EAKgD;AACrD,MAAIA,OAAO,IAAIP,IAAI,CAAJA,OAAI,CAAJA,IAAf,SAAA,EAA2C;AACzC,WAAOA,IAAI,CAAX,OAAW,CAAX;AADF,GAAA,MAEO;AACL,UAAMQ,MAAM,GAAG,MAAMC,oBAAoB,CAAA,kBAAA,EAAA,MAAA,EAA6B,MACpEC,OAAO,CAAPA,OAAAA,CADF,YACEA,CADuC,CAApBD,EAArB;;AAGA,QAAA,OAAA,EAAa;AACXT,MAAAA,IAAI,CAAJA,OAAI,CAAJA,GAAAA,MAAAA;AACD;;AAED,WAAA,MAAA;AACD;AACF;AAED;AACA;AACA;AACA;;AACA,OAAO,SAAA,iCAAA,CAA8C;AAAA,EAAA,UAAA;AAEnD,KAAGW;AAFgD,CAA9C,EAGyE;AAC9E,SAAO,CACL,MAAMC,6BAA6B,CAD9B,WAC8B,CAD9B,EAEL,MAAMC,4BAA4B,CAAC,EAAE,GAAF,WAAA;AAAkBC,IAAAA,MAAM,EAAEC;AAA1B,GAAD,CAF7B,CAAP;AAID","sourcesContent":["import { Platform } from 'react-native';\n\nimport {\n  PlatformArray,\n  Getter,\n  GetSupportedPlatformInfoAsyncParams,\n  GetSupportedPlatformInfoSyncParams,\n  GetSupportedPlatformInfoFunctionsParams,\n} from './privateTypes';\n\ntype MemoType = { [key: string]: any };\n// centralized memo object\nlet memo: MemoType = {};\n\nexport function clearMemo() {\n  memo = {};\n}\n\n/**\n * function returns the proper getter based current platform X supported platforms\n * @param supportedPlatforms array of supported platforms (OS)\n * @param getter desired function used to get info\n * @param defaultGetter getter that returns a default value if desired getter is not supported by current platform\n */\nfunction getSupportedFunction<T>(\n  supportedPlatforms: PlatformArray,\n  getter: Getter<T>,\n  defaultGetter: Getter<T>\n): Getter<T> {\n  let supportedMap: any = {};\n  supportedPlatforms\n    .filter((key) => Platform.OS == key)\n    .forEach((key) => (supportedMap[key] = getter));\n  return Platform.select({\n    ...supportedMap,\n    default: defaultGetter,\n  });\n}\n\n/**\n * function used to get desired info synchronously — with optional memoization\n * @param param0\n */\nexport function getSupportedPlatformInfoSync<T>({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey,\n}: GetSupportedPlatformInfoSyncParams<T>): T {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = getSupportedFunction(supportedPlatforms, getter, () => defaultValue)();\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n    return output;\n  }\n}\n\n/**\n * function used to get desired info asynchronously — with optional memoization\n * @param param0\n */\nexport async function getSupportedPlatformInfoAsync<T>({\n  getter,\n  supportedPlatforms,\n  defaultValue,\n  memoKey,\n}: GetSupportedPlatformInfoAsyncParams<T>): Promise<T> {\n  if (memoKey && memo[memoKey] != undefined) {\n    return memo[memoKey];\n  } else {\n    const output = await getSupportedFunction(supportedPlatforms, getter, () =>\n      Promise.resolve(defaultValue)\n    )();\n    if (memoKey) {\n      memo[memoKey] = output;\n    }\n\n    return output;\n  }\n}\n\n/**\n * function that returns array of getter functions [async, sync]\n * @param param0\n */\nexport function getSupportedPlatformInfoFunctions<T>({\n  syncGetter,\n  ...asyncParams\n}: GetSupportedPlatformInfoFunctionsParams<T>): [Getter<Promise<T>>, Getter<T>] {\n  return [\n    () => getSupportedPlatformInfoAsync(asyncParams),\n    () => getSupportedPlatformInfoSync({ ...asyncParams, getter: syncGetter }),\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}